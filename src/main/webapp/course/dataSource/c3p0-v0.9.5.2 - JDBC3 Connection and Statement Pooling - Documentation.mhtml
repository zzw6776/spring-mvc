From: <Saved by Blink>
Subject: c3p0-v0.9.5.2 - JDBC3 Connection and Statement Pooling - Documentation
Date: Sat, 17 Jun 2016 01:38:59 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--8rswDToWzEvWns4AeNWAgeyH6ODmYmctAgvOIyvpFg----"

------MultipartBoundary--8rswDToWzEvWns4AeNWAgeyH6ODmYmctAgvOIyvpFg----
Content-Type: text/html
Content-ID: <frame-210-D3F3162D-E7A4-4093-A899-2648F382D6A5@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mchange.com/projects/c3p0/index.html

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8">
    <title>c3p0-v0.9.5.2 - JDBC3 Connection and Statement Pooling - Documen=
tation</title>
   =20
    <style type=3D"text/css">
      a.cfg_param {
         font-family: monospace;
      }
      a.small {
         font-size: smaller;
      }
      body {
         font-family: optima, helvetica, arial, sans-serif;
         line-height: 1.25;
      }
      dl.properties {
         padding: 0em 3em 0em 3em;
      }
      dl.properties dd {
         padding-bottom: 0.5em;
         font-size: smaller;
      }
      dl.properties dt {
         padding-top: 1em;
         border-top-width: 1;
         border-top-style: dashed;
         border-top-color: black;
         font-family: monospace;
	 color: red;
      }
      dl.properties div.default {
         padding-top: 0.5em;
         text-decoration: underline;
         padding-bottom: 0.5em;
      }
      dl.properties div.per-user {
      	 text-align: center;
         margin-top: 0.5em;
	 font-weight: bold;
	 border-width: 1;
         border-style: solid;=20
         border-color: black;
	 background-color: #FFCCCC;
      }
      dl.log_properties {
         border-width: 2;
         border-style: solid;
         border-color: black;
         padding: 0.5em 0.5em 0.5em 0.5em;
         font-size: smaller;
	 background-color: #DDDDDD;
      }
      dl.log_properties dd {
         padding-top: 0.5em;
         padding-bottom: 0.5em;
         /* font-size: smaller; */
      }
      dl.log_properties dt {
         padding-top: 1em;
         font-weight: bold;
         font-family: monospace;
	 color: black;
      }
      div.boxed {
        border-width: 1;
        border-style: solid;=20
        border-color: black;=20
        padding: 1em;=20
        font-size: smaller;
        background-color: #CCFFCC;
        margin-top: 1em;
        margin-bottom: 1em;
      }
      div.boxed h4 {
        margin-top: 0;
        padding-top: 0;
        font-weight: bold;
        text-decoration: underline;
      }
      div.deprecated {
         display: none;
         padding-top: 0;
         padding-left: 1em;
         padding-right: 1em;
         padding-bottom: 1em;
         background-color: #FFAAAA;
         border: 2px solid red;
      }
      div.deprecated h5 {
         font-weight: bold;
         color: #CC0000;
         margin-top: 0em;
         padding-top: 1em;
      }
      div.example {
         white-space: pre;
         font-family: monospace;
	 font-size: smaller;
	 background-color: #CCCCFF;
         margin: 3em 3em 3em 3em;
         padding: 1em 0em 1em 2em;
         border-top-width: 2;=20
         border-top-color: black;=20
         border-top-style: solid;=20
         border-bottom-width: 2;=20
         border-bottom-color: black;=20
         border-bottom-style: solid;=20
      /*
         doesn't show under Firefox
         border-top: 2 solid black;
         border-bottom: 2 solid black;
      */
      }
      div.example_properties {
         white-space: pre;
         font-family: monospace;
	 font-size: smaller;
	 background-color: #CCCCFF;
         margin: 3em 3em 3em 3em;
         padding: 1em 0em 1em 0em;
         border-top-width: 2;=20
         border-top-color: black;=20
         border-top-style: solid;=20
         border-bottom-width: 2;=20
         border-bottom-color: black;=20
         border-bottom-style: solid;=20
      }
      div.example_properties strong {
         font-weight: bold;
	 color: red;
      }
      div.hibernate_props {
         text-align: center;
      }
      div.indented {
         margin-left: 4em;
      }
      div.other_properties_desc {
         padding-top: 2px;
         padding-left: 2em;
         padding-right: 2em;
         padding-bottom: 5px;
         margin-bottom: 2em;
         text-align: justify;
         background: #ddf;
      }
      div.sectiontext {
         margin-left: 2em;
         margin-right: 2em;
      }
      div.subtitle {
	 font-size: 12pt;
	 background-color: #FFFFFF;
      }
      div.top_boilerplate {
         margin-left: 8em;
         margin-right: 8em;
      }

      h1 {
         text-align: center;
	 background-color: #FFCCAA;
      }
      h2 {
	 background-color: #FFFFAA;
         margin-top: 2em;
         border-bottom-width: 2;=20
         border-bottom-color: black;=20
         border-bottom-style: solid;=20
      }
      h3 {
         margin-right: -2em;
      }
      img {
         border: 0;
      }
      ol.contents ol {
         list-style-type: lower-roman;
      }
      ol.contents ol li {
	 font-size: smaller;
      }
      ol.contents > ul.box {
         list-style: circle;
      }
      ol.precedence {
        width: 75%;=20
        border-width: 2;=20
        border-color: black;=20
        border-style: solid;=20
        padding-left: 3em;=20
        padding-top: 1em;=20
        padding-bottom: 1em;=20
        padding-right: 1em;=20
        text-align: left;
      }

      ol.precedence > li {
	 font-size: smaller;
         margin-top: 0.5em;
      }
      span.deprecated {
         color: red;
         font-weight: bold;
      }
      span.hibparam_comment {
         font-family: optima, helvetica, arial, sans-serif;
         font-style: italic;
         text-decoration: underline;
      }
      span.toplink {
         font-size: 12;
         font-style: plain;
         float: right;
      }
      table.beanPropSummaryTable {
         width: 100%;
         border: none;
      }
      table.beanPropSummaryTable tr td {
         width: 33%;
         border: none;
         background: #ddf;
         font-family: monospace;
         line-height: 1.5;
         padding: 8px;
      }

      table.beanPropSummaryTable tr td  a {
         color: black;
      }

      table.hibernate_props {
         border-width: 2;
         border-color: black;=20
         border-style: solid;=20
	 font-size: smaller;
         margin-left: auto;
         margin-right: auto;
      }
      table.hibernate_props th {
	 background-color: #FFCCAA;
      }
      table.hibernate_props td {
         font-family: monospace;
      }
      tt {
      }
      ul.other_props_list {
         list-style: none;
         font-family: monospace;
         color: #A00;
      }
      ul.pointerlist {
         list-style: square;
      }
    </style>
  <style type=3D"text/css"></style><link rel=3D"stylesheet" type=3D"text/cs=
s" href=3D"chrome-extension://fidicgekecdkdmkjghdgadgdmcfodfid/themes/defau=
lt/content.css"></head>
  <body>
    <h1>
      <div>c3p0 - JDBC3 Connection and Statement Pooling</div>
      <div class=3D"subtitle">version 0.9.5.2</div>
    </h1>
    <div class=3D"top_boilerplate">
      <p>by Steve Waldman &lt;<a href=3D"mailto:swaldman@mchange.com">swald=
man@mchange.com</a>&gt;</p>
      <p>=C2=A9 2015 Machinery For Change, Inc.</p>
      <p><i>
	  This software is made available for use, modification, and redistributio=
n,
	  under the terms of the=20
	  <a href=3D"http://www.gnu.org/licenses/lgpl-2.1.html">Lesser GNU Public =
License, v.2.1 (LGPL)</a> or
	  the <a href=3D"http://www.eclipse.org/legal/epl-v10.html">Eclipse Public=
 License, v.1.0 (EPL)</a>,=20
	  at your option. You should have received copies of both licenses with th=
is distribution.
      </i></p>
      <ul class=3D"pointerlist">=20
	<li>API docs for c3p0 are <a href=3D"http://www.mchange.com/projects/c3p0/=
apidocs/index.html">here</a>.</li>=20
	<li>Looking for the definition of <a href=3D"http://www.mchange.com/projec=
ts/c3p0/index.html#configuration_properties">configuration properties</a>?<=
/li>
	<li>Looking for advice in <a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#hibernate-specific">using c3p0 with hibernate</a>?</li>
      </ul>
      <ul class=3D"pointerlist">=20
	<li>Download the latest version from <a href=3D"http://sourceforge.net/pro=
jects/c3p0/">c3p0's site on SourceForge</a></li>
	<li>Follow or fork <a href=3D"https://github.com/swaldman/c3p0">c3p0 on Gi=
tHub</a>.</li>
	<li>Follow <a href=3D"https://twitter.com/c3p0_jdbc">@c3p0_jdbc</a> on Twi=
tter.</li>
	<li>This may not be the most recent version of c3p0. See the current <a hr=
ef=3D"https://github.com/swaldman/c3p0/blob/master/src/dist-static/CHANGELO=
G">CHANGELOG</a>.</li>
      </ul>
      <p><b>Note:</b> Coordinates of this version on the Maven central repo=
sitory:  <tt>[groupId: <b>com.mchange</b>, artifactId: <b>c3p0</b>, version=
: <b>0.9.5.2]</b></tt></p>
    </div>
    <hr>
    <h2><a name=3D"contents">Contents</a></h2>
    <ol class=3D"contents">
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#conten=
ts">Contents</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#quicks=
tart">Quickstart</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#what_i=
s">What is c3p0?</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#prereq=
uisites">Prerequisites</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#instal=
lation">Installation</a></li>
      <li>
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#using_c3p0">Usi=
ng c3p0</a>
	<ol class=3D"contents">
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#using_com=
bopooleddatasource">Using ComboPooledDataSource</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#using_dat=
asources_factory">Using the DataSouces factory class</a></li>
	  <ul class=3D"box">
	    <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceOv=
errideBox">Box: Overriding authentication information (from non-c3p0 DataSo=
urces)</a></li>
	  </ul>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#querying"=
>Querying Pool Status</a></li>
	  <ul class=3D"box">
	    <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#using_c=
3p0_registry_box">Box: Using C3P0Registry to find a reference to a DataSour=
ce</a></li>
	  </ul>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#cleaning"=
>Cleaning Up Pool Resources</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#build_you=
r_own">Advanced: Building Your Own PoolBackedDataSource</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#raw_conne=
ction_ops">Advanced: Raw Connection and Statement Operations</a></li>
	</ol>
      </li>
      <li>
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuration">=
Configuration</a>
	<ol class=3D"contents">
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configura=
tion_introduction">Introduction</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#basic_poo=
l_configuration">Basic Pool Configuration</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#managing_=
pool_size">Managing Pool Size and Connection Age</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_connection_testing">Configuring Connection Testing</a></li>
	  <ul class=3D"box">
	    <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#simple_=
advice_on_connection_testing">Box: Simple advice on Connection testing </a>=
</li>
	  </ul>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_statement_pooling">Configuring Statement Pooling</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_recovery">Configuring Recovery From Database Outages</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#connectio=
n_customizers">Managing Connection Lifecycles with Connection Customizers</=
a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_unresolved">Configuring Unresolved Transaction Handling</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_to_debug_and_workaround_broken_clients">Configuring To Debug and Workaro=
und Broken Client Applications</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_to_avoid_memory_leaks_on_redeploy">Configuring To Avoid Memory Leaks On =
Redeploy</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#other_ds_=
configuration">Other DataSource Configuration</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#jmx_confi=
guration_and_management">Configuring and Managing c3p0 via JMX</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_logging">Configuring Logging</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#named_con=
figurations">Named configurations</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#per-user_=
configurations">Per-user configurations</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#user_exte=
nsions_to_configurations">User extensions to configuration</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#mixing_na=
med_per-user_extensions">Mixing named, per-user, and user-defined configura=
tion extensions</a></li>
	</ol>
      </li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#perfor=
mance">Performance</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#known_=
shortcomings">Known shortcomings</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#feedba=
ck_and_support">Feedback and support</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#config=
uration_properties">Appendix A: Configuration Properties</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#config=
uration_files">Appendix B: Configuation Files, etc.</a></li>
	<ol class=3D"contents">
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_prop=
erties">Overriding c3p0 defaults with a c3p0.properties file</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf=
">Overriding c3p0 defaults with "HOCON" (typesafe-config) configuration fil=
es</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#system_pr=
operties">Overriding c3p0 defaults with System properties</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-conf=
ig.xml">Named and Per-User configuration: Overriding c3p0 defaults via c3p0=
-config.xml</a></li>
	  <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configura=
tion_precedence">Precedence of Configuration Settings</a></li>
	</ol>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#hibern=
ate-specific">Appendix C: Hibernate-specific notes</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#tomcat=
-specific">Appendix D: Configuring c3p0 pooled DataSources for Apache Tomca=
t</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#jboss-=
specific">Appendix E: JBoss-specific notes</a></li>
      <li><a href=3D"http://www.mchange.com/projects/c3p0/index.html#oracle=
-specific">Appendix F: Oracle-specific API: createTemporaryBLOB() and creat=
eTemporaryCLOB()</a></li>
    </ol>
      (See also the API Documentation <a href=3D"http://www.mchange.com/pro=
jects/c3p0/apidocs/index.html">here</a>)
    <hr>
    <h2><a name=3D"quickstart">Quickstart</a><span class=3D"toplink"><a hre=
f=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=3D"=
http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"Go T=
o Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	c3p0 was designed to be butt-simple to use. Just put
	the files <tt>lib/c3p0-0.9.5.2.jar</tt> and <tt>lib/mchange-commons-java-0=
.2.11.jar</tt> in your application's
	effective <tt>CLASSPATH</tt>, then make a DataSource like this:
      </p>
      <div class=3D"example">
import com.mchange.v2.c3p0.*;
=09
...
=09
ComboPooledDataSource cpds =3D new ComboPooledDataSource();
cpds.setDriverClass( "org.postgresql.Driver" ); //loads the jdbc driver    =
       =20
cpds.setJdbcUrl( "jdbc:postgresql://localhost/testdb" );
cpds.setUser("dbuser");                                 =20
cpds.setPassword("dbpassword");                                 =20
      </div>
      <p>
	<b>[Optional]</b> If you want to turn on PreparedStatement pooling, you mu=
st also set <tt>maxStatements</tt>=20
	and/or <tt>maxStatementsPerConnection</tt> (both default to 0):
      </p>
      <div class=3D"example">
cpds.setMaxStatements( 180 );                                 =20
      </div>
      <p>
	Do whatever you want with your DataSource, which will be backed
	by a Connection pool set up with default parameters. You
	can bind the DataSource to a JNDI name service, or use it
	directly, as you prefer.
      </p>
      <p>
	When you are done, you can clean up the DataSource you've created
	like this:
      </p>
      <div class=3D"example">
cpds.close();
      </div>
      <p>
	That's it! The rest is detail.
      </p>
    </div>
    <h2><a name=3D"basics">What is c3p0?</a><span class=3D"toplink"><a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=3D"h=
ttp://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"Go To=
 Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	c3p0 is an easy-to-use library for making traditional JDBC drivers=20
	"enterprise-ready" by augmenting them with functionality defined by=20
	the jdbc3 spec and the optional extensions to jdbc2. As of version 0.9.5,
	c3p0 fully supports the jdbc4 spec.
      </p>
      <p>
	In particular,=20
	c3p0 provides several useful services:
      </p>
      <ul>
	<li>
	  A class whichs adapt traditional DriverManager-based JDBC
	  drivers to the newer <tt>javax.sql.DataSource</tt> scheme for acquiring
	  database Connections.
	</li>
	<li>
	  Transparent pooling of Connection and PreparedStatements
	  behind DataSources which can "wrap" around traditional
	  drivers or arbitrary unpooled DataSources.
	</li>
      </ul>
      <p>
	The library tries hard to get the details right:
      </p>
      <ul>
	<li>
	  c3p0 DataSources are both <tt>Referenceable</tt> and <tt>Serializable</t=
t>, and are thus
	  suitable for binding to a wide-variety of JNDI-based naming services.
	</li>
	<li>
	  Statement and ResultSets are carefully cleaned up when pooled
	  Connections and Statements are checked in, to prevent resource-
	  exhaustion when clients use the lazy but common resource-management
	  strategy of only cleaning up their Connections. (Don't be naughty.)
	</li>
	<li>
	  The library adopts the approach=20
	  defined by the JDBC 2 and 3 specification (even where these
	  conflict with the library author's preferences). DataSources
	  are written in the JavaBean style, offering all the required and
	  most of the optional properties (as well as some non-standard ones),
	  and no-arg constructors. All JDBC-defined internal interfaces are
	  implemented (ConnectionPoolDataSource, PooledConnection,
	  ConnectionEvent-generating Connections, etc.)
	  You can mix c3p0 classes with compliant third-party implementations
	  (although not all c3p0 features will work with external implementations =
of <tt>ConnectionPoolDataSource</tt>).=20
	</li>
      </ul>
      <p>
	c3p0 hopes to provide DataSource implementations more than suitable for=20
	use by high-volume "J2EE enterprise applications". Please provide feedback=
, bug-fixes, etc!
      </p>
    </div>
    <h2><a name=3D"prerequisites">Prerequisites</a><span class=3D"toplink">=
<a href=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img s=
rc=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=
=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	c3p0-0.9.5.2 requires a level 1.6.x or above Java Runtime Environment.
      </p>
    </div>
    <h2><a name=3D"installation">Installation</a><span class=3D"toplink"><a=
 href=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=
=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"=
Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	Place the files <tt>lib/c3p0-0.9.5.2.jar</tt> and=20
	<tt>lib/mchange-commons-java-0.2.11.jar</tt>
	somewhere in your CLASSPATH (or any other place where your application's
	classloader will find it). That's it!
      </p>
    </div>
    <h2><a name=3D"using_c3p0">Using c3p0</a><span class=3D"toplink"><a hre=
f=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=3D"=
http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"Go T=
o Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	From a users' perspective, c3p0 simply provides standard jdbc DataSource
	objects. When creating these DataSources, users can control pooling-relate=
d,=20
	naming-related, and other properties. (See <a href=3D"http://www.mchange.c=
om/projects/c3p0/index.html#configuration_properties">Appendix A</a> for a =
comprehensive
	list of configuration properties.) All pooling is entirely
	transparent to users once a DataSource has been created.
      </p>
      <p>
	There are three ways of acquiring c3p0 pool-backed DataSources: 1) directl=
y instantiate and configure a=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>ComboPooledDataSource</tt></a> bean;=20
	2) use the <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mch=
ange/v2/c3p0/DataSources.html"><tt>DataSources</tt> factory class</a>; or 3=
) "build your own" pool-backed
	DataSource by directly instantiating <tt>PoolBackedDataSource</tt> and set=
ting its <tt>ConectionPoolDataSource</tt>. Most
	users will probably find instantiating <a href=3D"http://www.mchange.com/p=
rojects/c3p0/apidocs/com/mchange/v2/c3p0/ComboPooledDataSource.html"><tt>Co=
mboPooledDataSource</tt></a>
	to be the most convenient approach. Once instantiated,
	c3p0 DataSources can be bound to nearly any JNDI-compliant name service.
      </p>
      <p>
	Regardless of how you create your DataSource, c3p0 will use defaults for a=
ny configuration parameters that
	you do not specify programmatically. c3p0 has built-in, hard-coded default=
s, but you can override these with
	configuration files, placed as top-level resources in the same <tt>CLASSPA=
TH</tt> (or ClassLoader)
	that loads c3p0's jar file.
      </p>
      <p>
	c3p0 DataSources may be configured via simple <tt>java.util.Properties</tt=
>
	files called <tt>c3p0.properties</tt>, via more advanced=20
	<a href=3D"https://github.com/typesafehub/config/blob/master/HOCON.md">HOC=
ON configuration files</a>=20
	(e.g. <tt>application.conf</tt>, <tt>application.json</tt>), or in an XML =
format,
	<tt>c3p0-config.xml</tt>.
	See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#configurati=
on">Configuration</a> below.
      </p>
      <h3>
	<a name=3D"using_combopooleddatasource">Instantiating and Configuring a Co=
mboPooledDataSource</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Perhaps the most straightforward way to create a c3p0 pooling DataSource i=
s to instantiate an instance of=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>com.mchange.v2.c3p0.ComboPooledDataSource=
</tt></a>.=20
	This is a JavaBean-style class with a public, no-arg constructor,
	but before you use the DataSource, you'll have to be sure to set at least =
the property <tt>jdbcUrl</tt>. You may also
	want to set <tt>user</tt> and <tt>password</tt>, and, if you use an old-st=
yle JDBC driver that you will not
	externally preload, you should set the <tt>driverClass</tt>.=20
      </p>
<div class=3D"example">
ComboPooledDataSource cpds =3D new ComboPooledDataSource();
cpds.setDriverClass( "org.postgresql.Driver" ); //loads the jdbc driver    =
       =20
cpds.setJdbcUrl( "jdbc:postgresql://localhost/testdb" );
cpds.setUser("swaldman");                                 =20
cpds.setPassword("test-password");                                 =20
=09
// the settings below are optional -- c3p0 can work with defaults
cpds.setMinPoolSize(5);                                    =20
cpds.setAcquireIncrement(5);
cpds.setMaxPoolSize(20);
=09
// The DataSource cpds is now a fully configured and usable pooled DataSour=
ce
=09
...
</div>
      <p>
	The default values of any c3p0 DataSource property are determined by confi=
guration you supply, or
	else revert to hard-coded defaults [see <a href=3D"http://www.mchange.com/=
projects/c3p0/index.html#configuration_properties">configuration properties=
</a>].
	c3p0 supports <a href=3D"http://www.mchange.com/projects/c3p0/index.html#n=
amed_configurations">named configurations</a> so that you can
	configure multiple DataSources.
	If you wish to use a named configuration, construct your=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>com.mchange.v2.c3p0.ComboPooledDataSource=
</tt></a>
	with the configuration name as a constructor agument:
      </p>
      <div class=3D"example">
ComboPooledDataSource cpds =3D new ComboPooledDataSource("intergalactoApp")=
;
      </div>
      <p>
	Of course, you can still override any configuration properties programmati=
cally, as above.
      </p>
      <h3>
	<a name=3D"using_datasources_factory">Using the DataSources factory class<=
/a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Alternatively, you can use the static factory class=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DataSources.html"><tt>com.mchange.v2.c3p0.DataSources</tt></a> to build u=
npooled DataSources=20
	from traditional JDBC drivers, and to build pooled DataSources from unpool=
ed DataSources:
      </p>
      <div class=3D"example">
DataSource ds_unpooled =3D DataSources.unpooledDataSource("jdbc:postgresql:=
//localhost/testdb",=20
                                                        "swaldman",=20
                                                        "test-password");
DataSource ds_pooled =3D DataSources.pooledDataSource( ds_unpooled );

// The DataSource ds_pooled is now a fully configured and usable pooled Dat=
aSource.
// The DataSource is using a default pool configuration, and Postgres' JDBC=
 driver
// is presumed to have already been loaded via the jdbc.drivers system prop=
erty or an
// explicit call to Class.forName("org.postgresql.Driver") elsewhere.
=09
...
      </div>
      <p>
	If you use the <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com=
/mchange/v2/c3p0/DataSources.html">DataSources</a>
	factory class, and you want to programmatically override default configura=
tion
	parameters, you can supply a map of override properties:
      </p>
      <div class=3D"example">
DataSource ds_unpooled =3D DataSources.unpooledDataSource("jdbc:postgresql:=
//localhost/testdb",=20
                                                        "swaldman",=20
                                                        "test-password");
							     =20
Map overrides =3D new HashMap();
overrides.put("maxStatements", "200");         //Stringified property value=
s work
overrides.put("maxPoolSize", new Integer(50)); //"boxed primitives" also wo=
rk

// create the PooledDataSource using the default configuration and our over=
rides
ds_pooled =3D DataSources.pooledDataSource( ds_unpooled, overrides );=20

// The DataSource ds_pooled is now a fully configured and usable pooled Dat=
aSource,
// with Statement caching enabled for a maximum of up to 200 statements and=
 a maximum
// of 50 Connections.

...
      </div>
      <p>
	If you are using <a href=3D"http://www.mchange.com/projects/c3p0/index.htm=
l#named_configurations">named configurations</a>, you can specify the confi=
guration
	that defines the default configuration for your DataSource:
      </p>
      <div class=3D"example">
// create the PooledDataSource using the a named configuration and specifie=
d overrides
// "intergalactoApp" is a named configuration
ds_pooled =3D DataSources.pooledDataSource( ds_unpooled, "intergalactoApp",=
 overrides );=20
      </div>

      <p><a id=3D"showDataSourcesWithPoolConfig" style=3D"display: block" h=
ref=3D"http://www.mchange.com/projects/c3p0/index.html#" onclick=3D"return =
toggleDisplay('showDataSourcesWithPoolConfig', 'DataSourcesWithPoolConfig')=
;">Show deprecated PoolConfig approach...</a></p>
      <div class=3D"deprecated" style=3D"display: none" id=3D"DataSourcesWi=
thPoolConfig">
	<h5>Deprecated! Programmatic configuration via PoolConfig</h5>
	<p>
	  If you use the <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/c=
om/mchange/v2/c3p0/DataSources.html">DataSources</a>
	  factory class, and you want to programmatically override default configu=
ration
	  parameters, make use of the <a href=3D"http://www.mchange.com/projects/c=
3p0/apidocs/com/mchange/v2/c3p0/PoolConfig.html"><tt>PoolConfig</tt></a> cl=
ass:
	</p>
	<div class=3D"example">
DataSource ds_unpooled =3D DataSources.unpooledDataSource("jdbc:postgresql:=
//localhost/testdb",=20
                                                        "swaldman",=20
                                                        "test-password");
							     =20
PoolConfig pc =3D new PoolConfig();
pc.setMaxStatements(200);  //turn on Statement pooling

// pass our overriding PoolConfig to the DataSources.pooledDataSource() fac=
tory method.

ds_pooled =3D DataSources.pooledDataSource( ds_unpooled, pc );=20

// The DataSource ds_pooled is now a fully configured and usable pooled Dat=
aSource,
// with Statement caching enabled for a maximum of up to 200 statements.

...
	</div>
	<a id=3D"hideDataSourcesWithPoolConfig" href=3D"http://www.mchange.com/pro=
jects/c3p0/index.html#" onclick=3D"return toggleDisplay('showDataSourcesWit=
hPoolConfig', 'DataSourcesWithPoolConfig');">Hide deprecated PoolConfig app=
roach</a>
      </div>
 =20
      <div class=3D"boxed">
	<a name=3D"forceOverrideBox">
	<h4>RARE: Forcing authentication information, regardless of (mis)configura=
tion of the underlying (unpooled) DataSource</h4>
	<p>
	  You can wrap any DataSouce using <tt>DataSource.pooledDataSource( ... )<=
/tt>, usually with no
	  problem whatsoever. DataSources are supposed to indicate the username an=
d password associated
	  by default with Connections via standard properties <tt>user</tt> and <t=
t>password</tt>.=20
	  Some DataSource implementations do not offer these properties. Usually t=
his is not at all
	  a problem. <tt>c3p0</tt> works around this
	  by acquiring "default" Connections from the DataSource if it can't find =
default authentication
	  information, and a client has not specified the authentification informa=
tion via=20
	  <tt>getConnection( user, password )</tt>.
	</p>
	<p>
	  However, in rare circumstances, non-c3p0 unpooled DataSources provide a =
<tt>user</tt> property,=20
	  but not a password property, or you have access to a DataSource that you=
 wish to wrap behind a pool,
	  but you wish to override its build-in authentification defaults without =
actually modifying the <tt>user</tt>
	  or <tt>password</tt> properties.
	</p>
	</a><p><a name=3D"forceOverrideBox">
	  <tt>c3p0</tt> provides configuation properties <tt>overrideDefaultUser</=
tt> and <tt>overrideDefaultPassword</tt>.
	  If you set these properties, programmatically as above, or via any of c3=
p0's </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#configu=
ration">configuration mechanisms</a>,
	  <tt>c3p0</tt> PooledDataSources will ignore the user and password proper=
ty associated with the underlying DataSource,
	  and use the specified overrides instead.
	</p>
      </div>
      <h3>
	<a name=3D"querying">Querying a PooledDataSource's current status</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 DataSources backed by a pool, which include implementations of=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>ComboPooledDataSource</tt></a> and
	the objects returned by <tt><a href=3D"http://www.mchange.com/projects/c3p=
0/apidocs/com/mchange/v2/c3p0/DataSources.html">DataSources</a>.pooledDataS=
ource( ... )</tt>,=20
	all implement the interface
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/PooledDataSource.html"><tt>com.mchange.v2.c3p0.PooledDataSource</tt></a>,=
=20
	which makes available a number of methods for querying the status of
	DataSource Connection pools. Below is sample code that queries a DataSourc=
e for its=20
	status:
      </p>
      <div class=3D"example">
// fetch a JNDI-bound DataSource
InitialContext ictx =3D new InitialContext();
DataSource ds =3D (DataSource) ictx.lookup( "java:comp/env/jdbc/myDataSourc=
e" );

// make sure it's a c3p0 PooledDataSource
if ( ds instanceof PooledDataSource)
{
  PooledDataSource pds =3D (PooledDataSource) ds;
  System.err.println("num_connections: "      + pds.getNumConnectionsDefaul=
tUser());
  System.err.println("num_busy_connections: " + pds.getNumBusyConnectionsDe=
faultUser());
  System.err.println("num_idle_connections: " + pds.getNumIdleConnectionsDe=
faultUser());
  System.err.println();
}
else
  System.err.println("Not a c3p0 PooledDataSource!");
      </div>
      <p>
	The status querying methods all come in three overloaded forms, such as:
      </p>
      <ul>
	<li><tt>public int getNumConnectionsDefaultUser()</tt></li>
	<li><tt>public int getNumConnections(String username, String password)</tt=
></li>
	<li><tt>public int getNumConnectionsAllUsers()</tt></li>
      </ul>
      <p>
	c3p0 maintains separate pools for Connections with distinct
	authentications. The various methods let you query the status of pools ind=
ividually,
	or aggregate statistics for all authentifications for which your DataSourc=
e is maintaining
	pools. <i>Note that pool configuration parmeters such as <tt>maxPoolSize</=
tt> are enforced
	  on a per-authentification basis!</i> For example, if you have set <tt>ma=
xPoolSize</tt> to
	20, and if the DataSource is managing connections under two username-passw=
ord pairs [the
	default, and one other pair established via a call to <tt>getConnection(us=
er, password)</tt>,=20
	you should expect to see as many as 40 Connections from <tt>getNumConnecti=
onsAllUsers()</tt>.=20
      </p>
      <p>
	<i>
	  Most applications only acquire default-authenticated Connections from Da=
taSources, and
	  can typically just use the <tt>getXXXDefaultUser()</tt> to gather Connec=
tion statistics.
	</i>
      </p>
      <p>
        As well as Connection pool realted statistics, you can retrieve sta=
tus information about each
        DataSource's Thread pool.
      	Please see <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/c=
om/mchange/v2/c3p0/PooledDataSource.html"><tt>PooledDataSource</tt>=20
      	for a complete list of available operations.</a>
      </p>
      <div class=3D"boxed">
	<a name=3D"using_c3p0_registry_box">
	<h4>Using C3P0Registry to get a reference to a DataSource</h4>
	</a><p><a name=3D"using_c3p0_registry_box">
	  If it's inconvenient or impossible to get a reference to your DataSource=
 via JNDI or some other means,
	  you can find all live c3p0 DataSources using the
	  </a><a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/=
v2/c3p0/C3P0Registry.html"><tt>C3P0Registry</tt></a> class, which includes
	  three static methods to help you out:
	</p>
	<ul>
	  <li><tt>public static Set getPooledDataSources()</tt></li>
	  <li><tt>public static Set pooledDataSourcesByName( String dataSourceName=
 )</tt></li>
	  <li><tt>public static <a href=3D"http://www.mchange.com/projects/c3p0/ap=
idocs/com/mchange/v2/c3p0/PooledDataSource.html">PooledDataSource</a> =20
              pooledDataSourceByName( String dataSourceName )</tt></li>
	</ul>
	<p>
	  The first method will hand you the Set of all live c3p0=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c=
3p0/PooledDataSource.html">PooledDataSources</a>. If you are sure
	  your application only makes one <a href=3D"http://www.mchange.com/projec=
ts/c3p0/apidocs/com/mchange/v2/c3p0/PooledDataSource.html">PooledDataSource=
s</a>,
	  or you can distinguish between the DataSources by their configuration pr=
operties (inspected via "getters"), the=20
	  first method may be sufficient. Because this will not always be the case=
, c3p0=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c=
3p0/PooledDataSource.html">PooledDataSources</a> have a special property ca=
lled
	  <tt>dataSourceName</tt>. You can set the <tt>dataSourceName</tt> propert=
y directly when you construct your=20
	  DataSource, or dataSourceName can be set like any other property in a na=
med or the default config.=20
	  Otherwise, <tt>dataSourceName</tt> will default to either 1) the name of=
 your DataSource's configuration, if
	  you constructed it with a <a href=3D"http://www.mchange.com/projects/c3p=
0/index.html#named_configurations">named configuration</a>; or 2) a unique =
(but unpredicatble)
	  name if you are using the default configuration.
	</p>
	<p>
	  There is no guarantee that a <tt>dataSourceName</tt> will be unique. For=
 example, if two c3p0 DataSources share
	  the same <a href=3D"http://www.mchange.com/projects/c3p0/index.html#name=
d_configurations">named configuration</a>, and you have not set the <tt>dat=
aSourceName</tt> programmatically, the two
	  data sources will both share the name of the configuration. To get all o=
f the DataSources with a particular
	  <tt>dataSourceName</tt>, use <tt>pooledDataSourcesByName( ... )</tt>. If=
 you've ensured that your DataSource's
	  name is unique (as you will generally want to do, if you intend to use=
=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c=
3p0/C3P0Registry.html"><tt>C3P0Registry</tt></a> to find your DataSources),
	  you can use the convenience method <tt>pooledDataSourceByName( ... )</tt=
>, which will return your DataSource
	  directly, or <tt>null</tt> if no DataSource with that name is available.=
 If you use <tt>pooledDataSourceByName( ... )</tt>
	  and more than one DataSource shares the name supplied, which one it will=
 return is undefined.
	</p>
      </div>
      <h3>
	<a name=3D"cleaning">Cleaning up after c3p0 PooledDataSources</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	The easy way to clean up after c3p0-created DataSources is to use the stat=
ic destroy method
	defined by the class <a href=3D"http://www.mchange.com/projects/c3p0/apido=
cs/com/mchange/v2/c3p0/DataSources.html">DataSources</a>. Only=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/PooledDataSource.html"><tt>PooledDataSource</tt></a>s=20
	need to be cleaned up, but=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DataSources.html">DataSources</a>.destroy( ... ) does no harm if it is ca=
lled on an unpooled or non-c3p0
	DataSource.
      </p>
      <div class=3D"example">
DataSource ds_pooled   =3D null;
=09
try
{
  DataSource ds_unpooled =3D DataSources.unpooledDataSource("jdbc:postgresq=
l://localhost/testdb",=20
                                                          "swaldman",=20
                                                          "test-password");
  ds_pooled =3D DataSources.pooledDataSource( ds_unpooled );

  // do all kinds of stuff with that sweet pooled DataSource...
}
finally
{
  DataSources.destroy( ds_pooled );
}
      </div>
      <p>
	Alternatively, c3p0's <a href=3D"http://www.mchange.com/projects/c3p0/apid=
ocs/com/mchange/v2/c3p0/PooledDataSource.html"><tt>PooledDataSource</tt></a=
>
	interface contains a <tt>close()</tt> method
	that you can call when you know you are finished with a DataSource. So, yo=
u can cast a c3p0
	derived DataSource to a <tt>PooledDataSource</tt> and close it:
      </p>
  <div class=3D"example">
static void cleanup(DataSource ds) throws SQLException
{
  // make sure it's a c3p0 PooledDataSource
  if ( ds instanceof PooledDataSource)
  {
    PooledDataSource pds =3D (PooledDataSource) ds;
    pds.close();
  }    =20
  else
    System.err.println("Not a c3p0 PooledDataSource!");
}
  </div>
      <p>
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>ComboPooledDataSource</tt></a>
	is an instance of <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/=
com/mchange/v2/c3p0/PooledDataSource.html"><tt>PooledDataSource</tt></a>,
	and can be closed directly via its <tt>close()</tt> method. <tt>PooledData=
Source</tt> implements <tt>java.lang.AutoCloseable</tt>,
	so they may be managed by=20
	<a href=3D"http://docs.oracle.com/javase/tutorial/essential/exceptions/try=
ResourceClose.html">Java 7+ try-with-resources</a> blocks.
      </p>
      <p>
	Unreferenced instances of <a href=3D"http://www.mchange.com/projects/c3p0/=
apidocs/com/mchange/v2/c3p0/PooledDataSource.html"><tt>PooledDataSource</tt=
></a>
	that are not <tt>close()</tt>ed by clients
	<tt>close()</tt> themselves prior to garbage collection in their <tt>final=
ize()</tt> methods.=20
	As always, finalization should be considered
	a backstop and not a prompt or sure approach to resource cleanup.
      </p>
      <h3>
	<a name=3D"build_your_own">Advanced: Building your own PoolBackedDataSourc=
e</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	There is little reason for most programmers to do this, but you can build =
a PooledDataSource in a
	step-by-step way by instantiating and configuring an unpooled=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DriverManagerDataSource.html"><tt>DriverManagerDataSource</tt></a>, insta=
ntiating a
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/WrapperConnectionPoolDataSource.html"><tt>WrapperConnectionPoolDataSource=
</tt></a>
	 and setting the unpooled DataSource as its <tt>nestedDataSource</tt> prop=
erty,
	and then using that to set the <tt>connectionPoolDataSource</tt> property =
of a new=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/PoolBackedDataSource.html"><tt>PoolBackedDataSource</tt></a>.
      </p>
      <p>
	This sequence of events is primarily interesting if your driver offers an =
implementation of ConnectionPoolDataSource, and you'd
	like c3p0 to use that. Rather than using c3p0's=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/WrapperConnectionPoolDataSource.html"><tt>WrapperConnectionPoolDataSource=
</tt></a>,=20
	you can create a <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/c=
om/mchange/v2/c3p0/PoolBackedDataSource.html"><tt>PoolBackedDataSource</tt>=
</a>
	and set its <tt>connectionPoolDataSource</tt> property. Statement pooling,=
=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ConnectionCustomizer.html"><tt>ConnectionCustomizers</tt></a>, and many c=
3p0-specific properties
	are unsupported with third party implementations of <tt>ConnectionPoolData=
Source</tt>. (Third-party <tt>DataSource</tt> implementations
	can be substituted for c3p0's=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DriverManagerDataSource.html"><tt>DriverManagerDataSource</tt></a> with n=
o significant loss of
	functionality.)
      </p>
      <h3>
	<a name=3D"raw_connection_ops">Advanced: Raw Connection and Statement Oper=
ations</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <div class=3D"boxed">
	<b>
	  Note: As of c3p0-0.9.5, c3p0 supports the standard JDBC4 <tt>unwrap()</t=
t> methods
	  for looking through proxies. Note that if you use the <tt>unwrap()</tt> =
methods, c3p0
	  can not clean up any <tt>Statement</tt> or <tt>ResultSet</tt> objects yo=
u may generate
	  from raw Connections or Statements. Users must take care to clean up the=
se objects directly.
	  Further, users should take care not to modify underlying <tt>Connection<=
/tt>s in some manner
	  that would render them no longer interchangeable with other <tt>Connecti=
on</tt>s, as they must
	  be to remain suitable for pooling.
	</b>
      </div>
      <p>
	JDBC drivers sometimes define vendor-specific, non-standard API on Connect=
ion and Statement implementations. C3P0 wraps
	these Objects behind a proxies, so you cannot cast C3P0-returned Connectio=
ns or Statements to the vendor-specific implementation
	classes. C3P0 does not provide any means of accessing the raw Connections =
and Statements directly, because C3P0 needs to keep
	track of Statements and ResultSets created in order to prevent resource le=
aks and pool
	corruption.
      </p>
      <p>
	C3P0 does provide an API that allows you to invoke non-standard methods re=
flectively on an underlying
	Connection. To use it, first cast the returned Connection to a=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/C3P0ProxyConnection.html"><tt>C3P0ProxyConnection</tt></a>. Then call
	the method <tt>rawConnectionOperation</tt>, supplying the <tt>java.lang.re=
flect.Method</tt> object for
	the non-standard method you wish to call as an argument. The <tt>Method</t=
t> you supply will be invoked
	on the target you provide on the second argument (null for static methods)=
, and using the arguments you
	supply in the third argument to that function. For the target, and for any=
 of the method arguments, you
	can supply the special token <tt>C3P0ProxyConnection.RAW_CONNECTION</tt>, =
which will be replaced with
	the underlying vendor-specific Connection object before the <tt>Method</tt=
> is invoked.
      </p>
      <p>
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/C3P0ProxyStatement.html"><tt>C3P0ProxyStatement</tt></a> offers
	an exactly analogous API.
      </p>
      <p>
	Any Statements (including Prepared and CallableStatements) and ResultSets =
returned by raw operations
	will be c3p0-managed, and will be properly cleaned-up on <tt>close()</tt> =
of the parent proxy Connection.
	Users must take care to clean up any non-standard resources returned by a =
vendor-specific method.
      </p>
      <p>
	Here's an example of using Oracle-specific API to call a static method on =
a raw Connection:
      </p>
      <div class=3D"example">
C3P0ProxyConnection castCon =3D (C3P0ProxyConnection) c3p0DataSource.getCon=
nection();
Method m =3D CLOB.class.getMethod("createTemporary", new Class[]{Connection=
.class, boolean.class, int.class});
Object[] args =3D new Object[] {C3P0ProxyConnection.RAW_CONNECTION, Boolean=
.valueOf( true ), new Integer( 10 )};
CLOB oracleCLOB =3D (CLOB) castCon.rawConnectionOperation(m, null, args);		=
=09
      </div>
      <p>
	<i>C3P0 includes special support for some Oracle-specific methods.=20
	  See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#oracle-sp=
ecific">Appendix F</a>.
	</i>
      </p>
      <h2><a name=3D"configuration">Configuration</a><span class=3D"toplink=
"><a href=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img=
 src=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=
=3D"Go To Top"></a></span></h2>
      <h3>
	<a name=3D"programmatic_configuration"></a><a name=3D"configuration_introd=
uction">Introduction</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	While c3p0 does not <i>require</i> very much configuration, it is very twe=
akable. Most of the interesting
	knobs and dials are represented as JavaBean properties. Following JavaBean=
 conventions, we note that
	if an Object has a property of type <tt>T</tt> called <tt>foo</tt>, it wil=
l have methods that look
	like...
	</p><blockquote><tt>
	    public T getFoo();<br>
	    public void setFoo(T foo);
	</tt></blockquote>
	...or both, depending upon whether the property is read-only, write-only, =
or read-writable.
      <p></p>
      <p>
	There are several ways to modify c3p0 properties:=20
	You can directly alter the property values associated with a particular Da=
taSource in your code,=20
	or you can configure c3p0 externally...</p><ul>=20
	<li>via a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_=
properties">simple Java properties file</a></li>
	<li>via <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_co=
nf">HOCON (typesafe-config) files</a> (if and only if you bundle the typesa=
fe-config library with your application)</li>
	<li>via an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0=
-config.xml">XML configuration file</a></li>
	<li>via <a href=3D"http://www.mchange.com/projects/c3p0/index.html#system_=
properties">System properties</a></li></ul> Configuration files
	are normally looked up under standard names (<tt>c3p0.properties</tt> or <=
tt>c3p0-config.xml</tt>)
	at the top level of an application's classpath, but the XML configuration =
can be placed
	anywhere in an application's file system or classpath, if the system prope=
rty <a href=3D"http://www.mchange.com/projects/c3p0/index.html#locating_con=
figuration_information"><tt>com.mchange.v2.c3p0.cfg.xml</tt></a> is set.
      <p></p>
      <p>
	DataSources are usually configured before they are used, either
	during or immediately following their construction. c3p0 does
	support property modifications midstream, however.
      </p>
      <p>
	If you obtain a DataSource by instantiating a=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>ComboPooledDataSource</tt></a>,=20
	configure it by simply calling appropriate setter methods offered by that =
class
	before attempting a call to <tt>getConnection()</tt>. See the example abov=
e.
      </p>
      <p>
	If you obtain a DataSource by using factory methods of
	the utility class <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/=
com/mchange/v2/c3p0/DataSources.html"><tt>com.mchange.v2.c3p0.DataSources</=
tt></a>,
	and wish to use a non-default configuration, you can supply a Map of prope=
rty names (beginning with lower-case letters)
	to property values (either as Strings or "boxed" Java primitives like Inte=
ger or Boolean).
      </p>
      <p>
	All tweakable properties are documented for reference
	in <a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuratio=
n_properties">Appendix A</a>. Most c3p0 configuration
	topics are discussed in detail below.
      </p>
      <h3>
	<a name=3D"basic_pool_configuration">Basic Pool Configuration</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 Connection pools are very easy to configure via the following basic p=
arameters:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#acquireIncrement">acquireIncrement</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#initialPoolSize">initialPoolSize</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxPoolSize">maxPoolSize</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxIdleTime">maxIdleTime</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#minPoolSize">minPoolSize</a></li>
      </ul>
      <p>
	<tt>initialPoolSize</tt>, <tt>minPoolSize</tt>, <tt>maxPoolSize</tt>
	define the number of Connections that will be pooled. Please ensure that
	<tt>minPoolSize &lt;=3D maxPoolSize</tt>. Unreasonable values of <tt>initi=
alPoolSize</tt> will
	be ignored, and <tt>minPoolSize</tt> will be used instead.
      </p>
      <p>
	Within the range between <tt>minPoolSize</tt> and <tt>maxPoolSize</tt>, th=
e number of Connections in
	a pool varies according to usage patterns. The number of Connections incre=
ases whenever a Connection
	is requested by a user, no Connections are available, and the pool has not=
 yet reached <tt>maxPoolSize</tt>
	in the number of Connections managed.=20
      </p>
      <p>
	Since Connection acquisition is very slow, it is almost always useful to
	increase the number of Connections eagerly, in batches, rather than forcin=
g each client to wait for a new
	Connection to provoke a single acquisition when the load is increasing. <t=
t>acquireIncrement</tt> determines
	how many Connections a c3p0 pool will attempt to acquire when the pool has=
 run out of Connections. (Regardless
	of <tt>acquireIncrement</tt>, the pool will never allow <tt>maxPoolSize</t=
t> to be exceeded.)
      </p>
      <p>
	The number of Connections in a pool decreases whenever a pool tests a Conn=
ection and finds it to be broken (see
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuring_con=
nection_testing">Configuring Connection Testing</a> below), or when a Conne=
ction is expired
	by the pool after sitting idle for a period of time, or for being too old =
(See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#managing_po=
ol_size">Managing Pool Size and Connection Age</a>.)
      </p>
      <h3>
	<a name=3D"managing_pool_size">Managing Pool Size and Connection Age</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Different applications have different needs with regard to trade-offs betw=
een performance, footprint, and reliability. C3P0
	offers a wide variety of options for controlling how quickly pools that ha=
ve grown large under load revert to <tt>minPoolSize</tt>,
	and whether "old" Connections in the pool should be proactively replaced t=
o maintain their reliablity.
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxConnectionAge">maxConnectionAge</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxIdleTime">maxIdleTime</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxIdleTimeExcessConnections">maxIdleTimeExcessConnections</a></li=
>
      </ul>
	 <p>
    By default, pools will never expire Connections. If you wish
	Connections to be expired over time in order to maintain "freshness",=20
	set <tt>maxIdleTime</tt> and/or <tt>maxConnectionAge</tt>. <tt>maxIdleTime=
</tt> defines how many seconds a
	Connection should be permitted to go unused before being culled from the p=
ool. <tt>maxConnectionAge</tt>
	forces the pool to cull any Connections that were acquired from the databa=
se more than the set number of
	seconds in the past.
      </p>
      <p>
    <tt>maxIdleTimeExcessConnections</tt> is about minimizing the number of=
 Connections held by c3p0 pools
    when the pool is not under load. By default, c3p0 pools grow under load=
, but only shrink if Connections
    fail a Connection test or are expired away via the parameters described=
 above. Some users want their
    pools to quickly release unnecessary Connections after a spike in usage=
 that forces a large pool size.
    You can achieve this by setting <tt>maxIdleTimeExcessConnections</tt> t=
o a value much shorter than=20
    <tt>maxIdleTime</tt>, forcing Connections beyond your set minimum size =
to be released if they sit idle
    for more than a short period of time.
      </p>
      <p>
    Some general advice about all of these timeout parameters: Slow down! T=
he point of Connection pooling is to
    bear the cost of acquiring a Connection only once, and then to reuse th=
e Connection many, many times.
    Most databases support Connections that remain open for hours at a time=
. There's no need to churn through
    all your Connections every few seconds or minutes. Setting <tt>maxConne=
ctionAge</tt> or <tt>maxIdleTime</tt> to 1800 (30 minutes)
    is quite aggressive. For most databases, several hours may be more appr=
opriate. You can ensure the reliability
    of your Connections by testing them, rather than by tossing them. (see
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuring_con=
nection_testing">Configuring Connection Testing</a>.) The only one of these=
 parameters
    that should generally be set to a few minutes or less is <tt>maxIdleTim=
eExcessConnections</tt>.
      </p>
      <h3>
	<a name=3D"configuring_connection_testing">Configuring Connection Testing<=
/a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 can be configured to test the Connections that it pools in a variety =
of ways, to
	minimize the likelihood that your application will see broken or "stale" C=
onnections.
	Pooled Connections can go bad for a variety of reasons -- some JDBC driver=
s intentionally
	"time-out" long-lasting database Connections; back-end databases or networ=
ks sometimes go down=20
	"stranding" pooled Connections; and Connections can simply become corrupte=
d over time and use due
	to resource leaks, driver bugs, or other causes.
      </p>
      <p>
	c3p0 provides users a great deal of flexibility in testing Connections, vi=
a the following
	configuration parameters:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#automaticTestTable">automaticTestTable</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#connectionTesterClassName">connectionTesterClassName</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#idleConnectionTestPeriod">idleConnectionTestPeriod</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#preferredTestQuery">preferredTestQuery</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#testConnectionOnCheckin">testConnectionOnCheckin</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#testConnectionOnCheckout">testConnectionOnCheckout</a></li>
      </ul>
      <p>
	<tt>idleConnectionTestPeriod</tt>, <tt>testConnectionOnCheckout</tt>, and
	<tt>testConnectionOnCheckin</tt> control <u>when</u> Connections will be t=
ested.
	<tt>automaticTestTable</tt>, <tt>connectionTesterClassName</tt>, and <tt>p=
referredTestQuery</tt> control <u>how</u> they will be tested.
      </p>
      <p>
	When configuring Connection testing, first try to minimize the cost of eac=
h test. If you are using a JDBC driver
	that you are certain supports the new(ish) jdbc4 API =E2=80=94 and if you =
are using c3p0-0.9.5 or higher! =E2=80=94 let your driver handle this for y=
ou.=20
	jdbc4 Connections include a method called
	<tt>isValid()</tt> that should be implemented as a fast, reliable Connecti=
on test. By default, c3p0 will use that
	method if it is present.=20
      </p>

      <p>
	However, if your driver does not support this new-ish API, c3p0's default =
behavior is to test Connections
	by calling the <tt>getTables()</tt> method on a Connection's associated <t=
t>DatabaseMetaData</tt>
	object. This has the advantage of being very robust and working with any d=
atabase, regardless of the database schema.=20
	However, a call to <tt>DatabaseMetaData.getTables()</tt> is often much slo=
wer than a simple database query,
	and using this test may significantly impair your pool's performance.
      </p>
      <p>
	The simplest way to speed up Connection testing under a JDBC 3 driver (or =
a pre-0.9.5 version of c3p0)
	is to define a test query with the <tt>preferredTestQuery</tt>
	parameter. Be careful, however. Setting <tt>preferredTestQuery</tt> will l=
ead to errors as Connection tests fail
	if the query target table does not exist in your database <i>prior to init=
ialization of your DataSource</i>.
	Depending on your database and JDBC driver, a table-independent query like=
 <tt>SELECT 1</tt> may (or may not) be=20
	sufficient to verify the Connection.
	If a table-independent query is not sufficient, instead of <tt>preferredTe=
stQuery</tt>, you can set=20
	the parameter <tt>automaticTestTable</tt>. Using the name
	you provide, c3p0 will create an empty table, and make a simple query agai=
nst it to test the database.
      </p>
      <p>
	The most reliable time to test Connections is on check-out. But this is al=
so the most costly choice
	from a client-performance perspective. Most applications should work quite=
 reliably using a combination of=20
	<tt>idleConnectionTestPeriod</tt> and <tt>testConnectionOnCheckin</tt>. Bo=
th the idle test and the check-in=20
	test are performed asynchronously, which can lead to better performance, b=
oth perceived and actual.
      </p>
      <p>
	For some applications, high performance is more important than the risk of=
 an occasional database exception.
	In its default configuration, c3p0 does no Connection testing at all. Sett=
ing a fairly long=20
	<tt>idleConnectionTestPeriod</tt>, and not testing on checkout and check-i=
n at all is an excellent, high-performance
	approach.
      </p>
      <p>
	It is possible to customize how c3p0's <tt>DefaultConnectionTester</tt> te=
sts when no <tt>preferredTestQuery</tt>
	or <tt>automaticTestTable</tt> are available. Please see <a href=3D"http:/=
/www.mchange.com/projects/c3p0/index.html#configuring_dctivt">Configuring D=
efaultConnectionTester.isValidTimeout</a> and
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuring_dct=
qtr">Configuring DefaultConnectionTester.QuerylessTestRunner</a>.
      </p>
      <p>
	Advanced users may define any kind of Connection testing they wish, by imp=
lementing a=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ConnectionTester.html">ConnectionTester</a> and supplying the
	fully qualified name of the class as <tt>connectionTesterClassName</tt>. I=
f you'd like your custom ConnectionTesters
	to honor and support the <tt>preferredTestQuery</tt> and <tt>automaticTest=
Table</tt> parameters, implement
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/UnifiedConnectionTester.html">UnifiedConnectionTester</a>, most convenien=
tly by extending
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/AbstractConnectionTester.html">AbstractConnectionTester</a>. See the <a h=
ref=3D"http://www.mchange.com/projects/c3p0/apidocs/index.html">api docs</a=
>
	for more information.
      </p>
      <p>
	If you know you want to use the jdbc4 <tt>Connection.isValid()</tt> method=
, but you want to set a timeout,
	consider writing a trivial extension of <a href=3D"http://www.mchange.com/=
projects/c3p0/apidocs/com/mchange/v2/c3p0/util/IsValidOnlyConnectionTester.=
html">IsValidConnectionTester</a>.
      </p>
      <div class=3D"example">
package com.mchange.v2.c3p0.example;

import com.mchange.v2.c3p0.util.IsValidOnlyConnectionTester;

public final class IsValidOnlyConnectionTester30 extends IsValidOnlyConnect=
ionTester
{
    protected int getIsValidTimeout() { return 30; }
}
      </div>
      <p>
	See? These really are trivial to write.
      </p>
      <div class=3D"boxed">
	<a name=3D"simple_advice_on_connection_testing">
	<h4>Simple advice on Connection testing</h4>
	<p>
	  If you don't know what to do, try this:
	</p>
	</a><ol type=3D"1"><a name=3D"simple_advice_on_connection_testing">
	  </a><li><a name=3D"simple_advice_on_connection_testing">
	    </a><p><a name=3D"simple_advice_on_connection_testing">
	      If you know your driver supports the JDBC 4 <tt>Connection.isValid(.=
..)</tt> method and you are using c3p0-0.9.5 or above, don't set a <tt>pref=
erredTestQuery</tt>.=20
	      If your driver does not support this method (or if you are not sure)=
, try <tt><b>SELECT 1</b></tt> for your <tt>preferredTestQuery</tt>, if you=
 are running MySQL or Postgres.
	      For other databases, look for=20
	      </a><a href=3D"http://stackoverflow.com/questions/3668506/efficient-=
sql-test-query-or-validation-query-that-will-work-across-all-or-most">sugge=
stions here</a>.
	      Leave <tt>automatedTestTable</tt> undefined.
	    </p>
	  </li>
	  <li>
	    <p>
	      Begin by setting <tt>testConnectionOnCheckout</tt> to <tt>true</tt> =
and get your application to run correctly and stably.
	      If you are happy with your application's performance, <i>you can sto=
p here!</i> This is the simplest, most reliable form of
	      Connection-testing, but it does have a client-visible performance co=
st.
	    </p>
	  </li>
	  <li>
	    <p>If you'd like to improve performance by eliminating Connection test=
ing from clients' code path:</p>
	    <ol type=3D"a">
	      <li><p>Set <tt>testConnectionOnCheckout</tt> to <tt>false</tt></p></=
li>
	      <li><p>Set <tt>testConnectionOnCheckin</tt> to <tt>true</tt></p></li=
>
	      <li>
		<p>
		  Set <tt>idleConnectionTestPeriod</tt> to <tt>30</tt>, fire up you appli=
cation and observe.
		  This is a pretty robust setting, all Connections will tested on check-i=
n and every 30 seconds thereafter while in the pool.
		  Your application should experience broken or stale Connections only ver=
y rarely, and the pool should
		  recover from a database shutdown and restart quickly. But there is some=
 overhead associated=20
		  with all that Connection testing.
		</p>
	      </li>
	      <li>
		<p>
		  If database restarts will be rare so quick recovery is not an
		  issue, consider reducing the frequency of tests by <tt>idleConnectionTe=
stPeriod</tt> to, say, <tt>300</tt>,
		  and see whether clients are troubled by stale or broken Connections. If=
 not, stick with <tt>300</tt>, or try an
		  even bigger number. Consider setting <tt>testConnectionOnCheckin</tt> b=
ack to false to avoid unnecessary tests
		  on checkin. Alternatively, if your application does encounter bad Conne=
ctions, consider reducing <tt>idleConnectionTestPeriod</tt>
		  and set <tt>testConnectionOnCheckin</tt> back to <tt>true</tt>. There a=
re no correct or incorrect values for these parameters:
		  you are trading off overhead for reliability in deciding how frequently=
 to test. The exact numbers are not so critical.
		  It's usually easy to find configurations that perform well. It's rarely=
 worth spending time in pursuit of "optimal" values here.
		</p>
	      </li>
	    </ol>
	  </li>
	</ol>
	<p>
	  So, when should you stick with simple and reliable (Step 2 above), and w=
hen is it worth going for better performance (Step 3)?
	  In general, it depends on how much work clients typically do with Connec=
tions once they check them out. If clients usually
	  make complex queries and/or perform multiple operations, adding the extr=
a cost of one fast test per checkout will not much affect
	  performance. But if your application typically checks out a Connection a=
nd performs one simple query with it, throwing in an additional
	  test can really slow things down.
	</p>
	<p>
	  That's nice in theory, but often people don't really have a good sense o=
f how much work clients perform on average.
	  The best thing to do is usually to try Step 3, see if it helps (however =
you measure performance), see if it hurts (is your application
	  troubled by broken Connections? does it recover from database restarts w=
ell enough?), and then decide. You can always go back to
	  simple, slow, and robust. Just set <tt>testConnectionOnCheckout</tt> to =
<tt>true</tt>, <tt>testConnectionOnCheckin</tt> to <tt>false</tt>,
	  and set <tt>idleConnectionTestPeriod</tt> to <tt>0</tt>.=20
	</p>
	<p>
	  <i>But do, always, be sure that your tests themselves are performant, ei=
ther because your JDBC driver supports </i><tt>Connection.isValid(...)</tt>=
<i> or because
	  you have set an efficient</i> <tt>preferredTestQuery</tt> <i>!!!</i>
	</p>
      </div>
      <h3>
	<a name=3D"configuring_statement_pooling">Configuring Statement Pooling</a=
>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 implements transparent PreparedStatement pooling as defined by the JD=
BC spec. Under some circumstances,
	statement pooling can dramatically improve application performance. Under =
other circumstances, the overhead of
	statement pooling can slightly harm
	performance. Whether and how much statement pooling will help depends on h=
ow much=20
	parsing, planning, and optimizing of queries your databases does when the =
statements are prepared.=20
	Databases (and JDBC drivers) vary widely
	in this respect. It's a good idea to benchmark your application with and w=
ithout statement pooling to=20
	see if and how much it helps.
      </p>
      <p>
	You configure statement pooling in c3p0 via the following
	configuration parameters:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxStatements">maxStatements</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxStatementsPerConnection">maxStatementsPerConnection</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#statementCacheNumDeferredCloseThreads">statementCacheNumDeferredCl=
oseThreads</a></li>
      </ul>
      <p>
	<tt>maxStatements</tt> is JDBC's standard parameter for controlling statem=
ent pooling. <tt>maxStatements</tt> defines the
	total number <tt>PreparedStatements</tt> a DataSource will cache. The pool=
 will destroy the least-recently-used PreparedStatement
	when it hits this limit. This sounds simple, but it's actually a strange a=
pproach, because
	cached statements conceptually belong to individual Connections; they are =
not global resources. To figure out a size
	for <tt>maxStatements</tt> that does not "churn" cached statements, you ne=
ed to consider the number of <i>frequently used</i>=20
	PreparedStatements in your application,	and multiply that by the number of=
 Connections you expect in the pool (<tt>maxPoolSize</tt>
	in a busy application).
      </p>
      <p>
	<tt>maxStatementsPerConnection</tt> is a non-standard configuration parame=
ter that makes a bit more
	sense conceptually. It defines how many statements each pooled Connection =
is allowed to own.
	You can set this to a bit more than the number of <tt>PreparedStatements</=
tt> your application <i>frequently</i>
	uses, to avoid churning.
      </p>
      <p>
	If either of these parameters are greater than zero, statement pooling wil=
l be enabled. If both
	parameters are greater than zero, both limits will be enforced. If only on=
e is greater than zero, statement pooling
	will be enabled, but only one limit will be enforced.
      </p>
      <p>
	If <tt>statementCacheNumDeferredCloseThreads</tt> is greater than zero, th=
e Statement pool will defer physically close()ing cached Statements until
	its parent Connection is not in use by any client or internally (in e.g. a=
 test) by the pool itself. For some JDBC drivers
	(especially Oracle), attempts to close a Statement freeze if the parent Co=
nnection is in use. This parameter defaults to 0.
	Set it to a positive value if you observe "APPARENT DEADLOCKS" realted to =
Connection close tasks. Almost always, that value should
        be one: if you need more than one Thread dedicated solely to Statem=
ent destruction, you probably should set <tt>maxStatements</tt> and/or
	<tt>maxStatementsPerConnection</tt> to higher values so you don't churn th=
rough cached Statements so quickly.
      </p>
      <h3>
	<a name=3D"configuring_recovery">Configuring Recovery From Database Outage=
s</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 DataSources are designed (and configured by default) to recover from =
temporary database outages, such as
	those which occur during a database restart or brief loss of network conne=
ctivity.
	You can affect how c3p0 handles errors in acquiring Connections via the fo=
llowing
	configurable properties:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#acquireRetryAttempts">acquireRetryAttempts</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#acquireRetryDelay">acquireRetryDelay</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#breakAfterAcquireFailure">breakAfterAcquireFailure</a></li>
      </ul>
      <p>
	When a c3p0 DataSource attempts and fails to acquire a Connection, it will=
 retry up
	to <tt>acquireRetryAttempts</tt> times, with a delay of <tt>acquireRetryDe=
lay</tt>
	between each attempt. If all attempts fail, any clients waiting for Connec=
tions from
	the DataSource will see an Exception, indicating that a Connection could n=
ot be acquired.
	Note that clients do not see any Exception until a full round of attempts =
fail, which
	may be some time after the initial Connection attempt. If <tt>acquireRetry=
Attempts</tt>=20
	is set to 0, c3p0 will attempt to acquire new Connections indefinitely, an=
d calls to
	<tt>getConnection()</tt> may block indefinitely waiting for a successful a=
cquisition.
      </p>
      <p>
	Once a full round of acquisition attempts fails, there are two possible po=
licies. By
	default, the c3p0 DataSource will remain active, and will try again to acq=
uire Connections
	in response to future requests for Connections. If you set <tt>breakAfterA=
cquireFailure</tt>
	to <tt>true</tt>, the DataSource will consider itself broken after a faile=
d round of
	Connection attempts, and future client requests will fail immediately.
      </p>
      <p>
	Note that if a database restart occurs, a pool may contain previously acqu=
ired but now
	stale Connections. By default, these stale Connections will only be detect=
ed and
	purged lazily, when an application attempts to use them, and sees an Excep=
tion. Setting
	<tt>maxIdleTime</tt> or <tt>maxConnectionAge</tt> can help speed up the re=
placement of
	broken Connections. (See <a href=3D"http://www.mchange.com/projects/c3p0/i=
ndex.html#managing_pool_size">Managing ConnectionAge</a>.)
	If you wish to avoid application Exceptions entirely, you must adopt a con=
nection testing strategy that
	is likely to detect stale Connections prior to their delivery to clients. =
(See=20
	"<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuring_co=
nnection_testing">Configuring Connection Testing</a>".) Even
	with active Connection testing (<tt>testConnectionOnCheckout</tt> set to <=
tt>true</tt>, or
	<tt>testConnectionOnCheckin</tt> and a short <tt>idleConnectionTestPeriod<=
/tt>), your
	application may see occasional Exceptions on database restart, for example=
 if the restart=20
	occurs after a Connection to the database has already been checked out.
      </p>
      <h3>
	<a name=3D"connection_customizers">Managing Connection Lifecycles with Con=
nection Customizer</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Application frequently wish to set up Connections in some standard, reusab=
le way immediately after
	Connection acquisitions. Examples of this include setting-up character enc=
odings, or date and time
	related behavior, using vendor-specific APIs or non-standard SQL statement=
 executions. Occasionally
	it is useful to override the default values of standard Connection propert=
ies such as <tt>transactionIsolation</tt>,
	<tt>holdability</tt>, or <tt>readOnly</tt>. c3p0 provides a "hook" interfa=
ce that you can implement,
	which gives you the opportunity to modify or track Connections just after =
they are checked out from the
	database, immediately just prior to being handed to clients on checkout, j=
ust prior to being returned
	to the pool on check-in, and just prior to final destruction by the pool. =
The Connections handed
	to ConnectionCustomizers are raw, physical Connections, with all vendor-sp=
ecific API accessible.
	See the API docs for <a href=3D"http://www.mchange.com/projects/c3p0/apido=
cs/com/mchange/v2/c3p0/ConnectionCustomizer.html"><tt>ConnectionCustomizer<=
/tt></a>.
      </p>
      <p>
    To install a <tt>ConnectionCustomizer</tt> just implement the interface=
, make your class accessible
    to c3p0's ClassLoader, and set the configuration parameter below:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#connectionCustomizerClassName">connectionCustomizerClassName</a></=
li>
      </ul>
      <p>
	ConnectionCustomizers are required to be immutable classes with public no =
argument constructors.
	They shouldn't store any state. For (rare) applications that wish to track=
 the behavior of individual
	DataSources with ConnectionCustomizers, the lifecycle methods each accept =
a DataSource-specific=20
	"identityToken", which is unique to each PooledDataSource. ConnectionCusto=
mizers can be configured
	via <a href=3D"http://www.mchange.com/projects/c3p0/index.html#user_extens=
ions_to_configurations">user-defined configuration extensions</a>.
      </p>
      <p>
	Below is a sample <tt>ConnectionCustomizer</tt>. Implementations that do n=
ot need to override all
	four <tt>ConnectionCustomizer</tt> methods can extend=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/AbstractConnectionCustomizer.html"><tt>AbstractConnectionCustomizer</tt><=
/a>
	to inherit no-op implementations of all methods. =20
      </p>
      <div class=3D"example">
import com.mchange.v2.c3p0.*;
import java.sql.Connection;

public class VerboseConnectionCustomizer
{
    public void onAcquire( Connection c, String pdsIdt )
    {=20
       System.err.println("Acquired " + c + " [" + pdsIdt + "]");=20

       // override the default transaction isolation of=20
       // newly acquired Connections
       c.setTransactionIsolation( Connection.REPEATABLE_READ );
    }

    public void onDestroy( Connection c, String pdsIdt )
    { System.err.println("Destroying " + c + " [" + pdsIdt + "]"); }

    public void onCheckOut( Connection c, String pdsIdt )
    { System.err.println("Checked out " + c + " [" + pdsIdt + "]"); }

    public void onCheckIn( Connection c, String pdsIdt )
    { System.err.println("Checking in " + c + " [" + pdsIdt + "]"); }
}
      </div>
      <p>
	For an example <tt>ConnectionCustomizer</tt> that employs
	user-defined configuration properties, see <a href=3D"http://www.mchange.c=
om/projects/c3p0/index.html#user_extensions_to_configurations">below</a>.=
=20
      </p>
      <h3>
	<a name=3D"configuring_unresolved">Configuring Unresolved Transaction Hand=
ling</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Connections checked into a pool cannot have any unresolved transactional w=
ork associated with them.
	If users have set <tt>autoCommit</tt> to <tt>false</tt> on a Connection, a=
nd c3p0 cannot guarantee
	that there is no pending transactional work, c3p0 must either <tt>rollback=
()</tt> or <tt>commit()</tt>
	on check-in (when a user calls <tt>close()</tt>). The JDBC spec is (unforg=
ivably) silent on the question
	of whether unresolved work should be committed or rolled back on Connectio=
n close. By default, c3p0
	rolls back unresolved transactional work when a user calls <tt>close()</tt=
>.
      </p>
      <p>
	You can adjust this behavior via the following configuration properties:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#autoCommitOnClose">autoCommitOnClose</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#forceIgnoreUnresolvedTransactions">forceIgnoreUnresolvedTransactio=
ns</a></li>
      </ul>
      <p>
	If you wish c3p0 to allow unresolved transactional work to commit on check=
in, set <tt>autoCommitOnClose</tt>
	to true. If you wish c3p0 to leave transaction management to you, and neit=
her commit nor rollback (nor modify
	the state of Connection <tt>autoCommit</tt>), you may set <tt>forceIgnoreU=
nresolvedTransactions</tt> to true. Setting
	<tt>forceIgnoreUnresolvedTransactions</tt> is strongly discouraged, becaus=
e if clients are not careful to
	commit or rollback themselves prior to close(), or do not set Connection <=
tt>autoCommit</tt> consistently, bizarre
	unreproduceable behavior and database lockups can occur.
      </p>
      <h3>
	<a name=3D"configuring_to_debug_and_workaround_broken_clients">Configuring=
 to Debug and Workaround Broken Client Applications</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Sometimes client applications are sloppy about close()ing all Connections =
they check out. Eventually,=20
	the pool grows to <tt>maxPoolSize</tt>, and then runs out of Connections, =
because of these bad clients.
      </p>
      <p>
    The right way to address this problem is to fix the client application.=
 <tt>c3p0</tt> can help you debug,
    by letting you know where Connections are checked out that occasionally=
 don't get checked in. In rare and
    unfortunate situations, development of the client application is closed=
, and even though it is buggy, you cannot fix it.
    c3p0 can help you work around the broken application, preventing it fro=
m exhausting the pool.=20
      </p>
      <p>
    The following parameters can help you debug or workaround broken client=
 applications. =20
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#debugUnreturnedConnectionStackTraces">debugUnreturnedConnectionSta=
ckTraces</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#unreturnedConnectionTimeout">unreturnedConnectionTimeout</a></li>
      </ul>
      <p>
    <tt>unreturnedConnectionTimeout</tt> defines a limit (in seconds) to ho=
w long a Connection may remain checked out.
    If set to a nozero value, unreturned, checked-out Connections that exce=
ed this limit will be summarily destroyed,
    and then replaced in the pool.=20
    Obviously, you must take care to set this parameter to a value large en=
ough that all intended operations
    on checked out Connections have time to complete.
    You can use this parameter to merely workaround unreliable client apps =
that fail to
    close() Connections.=20
      </p>
      <p>
    Much better than working-around is fixing. If, <i>in addition to settin=
g</i> <tt>unreturnedConnectionTimeout</tt>,
    you set <tt>debugUnreturnedConnectionStackTraces</tt> to <tt>true</tt>,
	then a stack trace will be captured
    each time a Connection is checked-out. Whenever an unreturned Connectio=
n times out, that stack trace will be
    printed, revealing where a Connection was checked out that was not chec=
ked in promptly. <tt>debugUnreturnedConnectionStackTraces</tt>
    is intended to be used only for debugging, as capturing a stack trace c=
an slow down Connection check-out.
      </p>
      <h3>
	<a name=3D"configuring_to_avoid_memory_leaks_on_redeploy">Configuring To A=
void Memory Leaks On Hot Redeploy Of Clients</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 spawns a variety of Threads (<a href=3D"http://www.mchange.com/projec=
ts/c3p0/index.html#numHelperThreads">helper threads</a>, <tt>java.util.Time=
r</tt> threads),
	and does so lazily in response to the first client request experienced by =
a PooledDataSource. By default, the Threads spawned
	by c3p0 inherit a <tt>java.security.AccessControlContext</tt> and a <tt>co=
ntextClassLoader</tt> property from this first-calling
	Thread. If that Thread came from a client that may need to be hot-undeploy=
ed, references to these objects may prevent the
	undeployed application, often partitioned into a <tt>ClassLoader</tt>, fro=
m being garbage collected. (See for example
	<a href=3D"https://wiki.apache.org/tomcat/MemoryLeakProtection">this descr=
iption of Tomcat memory leaks on redeployment</a>.)
      </p>
      <p>
	c3p0 provides two configuration parameters that can help with this:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contextClassLoaderSource">contextClassLoaderSource</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#privilegeSpawnedThreads">privilegeSpawnedThreads</a></li>
      </ul>
      <p>
	<tt>contextClassLoaderSource</tt> should be set to one of <tt>caller</tt>,=
 <tt>library</tt>, or <tt>none</tt>.
	The default (which yields the default behavior described above) is <tt>cal=
ler</tt>. Set this to <tt>library</tt>
	to use c3p0's ClassLoader, so that no reference is maintained to a client =
that may need to be redeployed.
      </p>
      <p>
	<tt>privilegeSpawnedThreads</tt> is a boolean, <tt>false</tt> by default.
	Set this to <tt>true</tt>
	so that c3p0's Threads use the the c3p0 library's <tt>AccessControlContext=
</tt>, rather than an <tt>AccessControlContext</tt>=20
	that may be associated with the client application and prevent its garbage=
 collection.
      </p>
      <h3>
	<a name=3D"other_ds_configuration">Other DataSource Configuration</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#configurati=
on_properties">Appendix A</a> for information about the following configura=
tion properties:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#checkoutTimeout">checkoutTimeout</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#factoryClassLocation">factoryClassLocation</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#forceSynchronousCheckins">forceSynchronousCheckins</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#maxAdministrativeTaskTime">maxAdministrativeTaskTime</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#numHelperThreads">numHelperThreads</a></li>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#usesTraditionalReflectiveProxies"><s>usesTraditionalReflectiveProx=
ies</s></a></li>
      </ul>
      <p>
      	<tt>numHelperThreads</tt> and <tt>maxAdministrativeTaskTime</tt> hel=
p to configure the behavior
      	of DataSource thread pools. By default, each DataSource has only thr=
ee associated helper threads.
      	If performance seems to drag under heavy load, or if you observe via=
 JMX or direct inspection of
      	a <tt>PooledDataSource</tt>, that the number of "pending tasks" is u=
sually greater than zero, try
      	increasing <tt>numHelperThreads</tt>. <tt>maxAdministrativeTaskTime<=
/tt> may be useful for users
      	experiencing tasks that hang indefinitely and "APPARENT DEADLOCK" me=
ssages. (See Appendix A for more.)
      </p>
      <p>
	Ordinarily check-ins are performed asynchronously so that clients do not e=
xperience the overhead of
	on-check-in Connection tests and/or operations specified in <tt>Connection=
Customizer.onCheckIn(...)</tt>.
	However, asynchronous checkins add to Thread pool congestion. Under loads =
so large that it is
	impractical to expand <tt>numHelperThreads</tt> to reduce congestion, <tt>=
forceSynchronousCheckins</tt>
	will cause client Threads to perform the checkin operations, adding to the=
 load of the Thread pool
	and precluding any delays in termination of checkin due to Thread pool con=
gestion. As long as you
	neither perform Connection tests on check-in (see <a class=3D"cfg_param" h=
ref=3D"http://www.mchange.com/projects/c3p0/index.html#testConnectionOnChec=
kin">testConnectionOnCheckin</a>)
	nor perform database operations or other slow work in <tt>ConnectionCustom=
izer.onCheckIn(...)</tt>,
	this setting is likely to improve performance. However, if Connections <i>=
are</i> tested on check-in,=20
	or custom work is performed, setting <tt>forceSynchronousCheckins</tt> wil=
l cause clients to experience=20
	delays associated with that work when they call <tt>Connection.close()</tt=
>.
      </p>
      <p>
      	<tt>checkoutTimeout</tt> limits how long a client will wait for a Co=
nnection, if all Connections are
      	checked out and one cannot be supplied immediately. <tt>usesTraditio=
nalReflectiveProxies</tt> is
      	of little practical use and is now formally deprecated. It permits y=
ou to use an old, now superceded=20
	implementation of C3P0-generated proxy objects. (C3P0
      	used to use reflective, dynamic proxies. Now, for enhanced performan=
ce, it uses code-generated, nonrefective
      	implementations.) <tt>factoryClassLocation</tt> can be used to indic=
ate where a URL from which c3p0 classes
      	can be downloaded, if c3p0 DataSources will be retrieved as Referenc=
es from a JNDI DataSource by clients
      	who do not have c3p0 locally installed.
      </p>
      <h3>
	<a name=3D"jmx_configuration_and_management">Configuring and Managing c3p0=
 via JMX</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	If JMX libraries and a JMX MBeanServer are available in your environment (=
they are include in JDK 1.5 and above),=20
	you can inspect and configure your c3p0 datasources via a JMX administrati=
on tool (such as jconsole, bundled with
	jdk 1.5). You will find that c3p0 registers MBeans under the domain <tt>co=
m.mchange.v2.c3p0</tt>, one with statistics about the
	library as a whole (called <tt>C3P0Registry</tt>), and an MBean for each <=
tt>PooledDataSource</tt> you deploy. You can view and
	modify your DataSource's configuration properties, track the activity of C=
onnection, Statement, and Thread pools, and reset
	pools and DataSources via the <tt>PooledDataSource</tt> MBean. (You may wi=
sh to view the API docs of=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/PooledDataSource.html"><tt>PooledDataSource</tt></a> for documentation of=
=20
	the available operations.)
      </p>
      <h4><a name=3D"configuring_jmx_names">Configuring JMX Names</a></h4>
      <p>
	Each <tt>PooledDataSource</tt> within your application may have the follow=
ing attributes embedded within its <tt>ObjectName</tt>:
	</p><ul>
	  <li><tt>type</tt></li>
	  <li><tt>identityToken</tt></li>
	  <li><tt>name</tt></li>
	</ul>
      <p></p>
      <p>
	The type will always be <tt>PooledDataSource</tt>. The <tt>identityToken</=
tt> is a unique String associated with each c3p0 DataSource.
	The <tt>name</tt> will be the value of the property <a class=3D"cfg_param"=
 href=3D"http://www.mchange.com/projects/c3p0/index.html#dataSourceName">da=
taSourceName</a>,
	which you can set yourself to ensure that semanically equivalent data sour=
ces are identifiable across application restarts. If you do not set
	a <a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/inde=
x.html#dataSourceName">dataSourceName</a>, the name attribute may not be de=
fined at all, or it may take some default value.
      </p>
      <p>
	For example, the following might be the full JMX ObjectName, in String for=
mat, of a c3p0 DataSource whose <tt>dataSourceName</tt> is <tt>intergalacto=
App</tt>:
      </p>
      <div class=3D"indented">
<tt>com.mchange.v2.c3p0:type=3DPooledDataSource,identityToken=3D2rvy139515e=
cj0rkwntk|16adc251,name=3DintergalactoApp</tt>
      </div>
      <p>
	c3p0 prefers to include identity tokens in JMX ObjectNames to ensure that =
every ObjectName is unique. If you can, stick with c3p0's default behavior.
	But if you really need to, you can configure c3p0 to exclude the <tt>ident=
ityToken</tt> attribute from ObjectNames, so that your
	PooledDataSources have predictable, reproducible names. Set the following,=
 as a System property, in <tt>c3p0.properties</tt>, or in <a href=3D"http:/=
/www.mchange.com/projects/c3p0/index.html#c3p0_conf">HOCON config</a>:
      </p>
      <div class=3D"example">
com.mchange.v2.c3p0.management.ExcludeIdentityToken=3Dtrue
      </div>
      <p>
	This will lead to names missing the long identity token, names like
      </p>
      <div class=3D"indented">
<tt>com.mchange.v2.c3p0:type=3DPooledDataSource,name=3DintergalactoApp</tt>
      </div>
      <p>
	If you exclude identity tokens from JMX names <b>you must ensure that each=
 PooledDataSource always has a unique <tt>dataSourceName</tt> value!</b>
	Otherwise, only one of the PooledDataSources with identical names will be =
accessible by JMX, and which one will be undefined. Excluding identity toke=
ns
	from JMX names is particularly hazardous if you will initialize multiple D=
ataSource from the same <a href=3D"http://www.mchange.com/projects/c3p0/ind=
ex.html#named_configurations">named configuration</a>.
	By default, <tt>dataSourceName</tt> takes the value of the configuration n=
ame.=20
	<b>
	  After constructing a PooledDataSouce with a named configuration, be sure=
 to update <tt>dataSourceName</tt> to some new, unique value befoe
	  constructing a second DataSource with the same named configuration.
	</b>
      </p>
      <p>
	The singleton <tt>C3P0Registry</tt> is also repesented by an MBean. It may=
 have the following attributes embedded within its JMX <tt>ObjectName</tt>:
	</p><ul>
	  <li><tt>type</tt></li>
	  <li><tt>name</tt></li>
	</ul>
      <p></p>
      <p>
	The value of the name attribute is determined by the following property, w=
hich may be set as a System property, in <tt>c3p0.properties</tt>, or in <a=
 href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf">HOCON c=
onfig</a>.
      </p>
      <div class=3D"example">
com.mchange.v2.c3p0.management.RegistryName=3DCoolC3P0Registry
      </div>
      <p>
	With the RegistryName shown above, the full JMX ObjectName, in String form=
at, would be
      </p>
      <div class=3D"indented">
<tt>com.mchange.v2.c3p0:type=3DC3P0Registry,name=3DCoolC3P0Registry</tt>
      </div>
      <p>
	If you do not explicitly set a RegistryName, no default value is used, no =
name attribute is embedded. The full JMX ObjectName in String format would =
be
      </p>
      <div class=3D"indented">
<tt>com.mchange.v2.c3p0:type=3DC3P0Registry</tt>
      </div>
      <h4><a name=3D"disabling_jmx_support">Disabling JMX Support</a></h4>
      <p>
    If you do not want c3p0 to register MBeans with your JMX environment, y=
ou can suppress JMX support
    entirely. Set the following, as a System property, in <tt>c3p0.properti=
es</tt>, or in <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c=
3p0_conf">HOCON config</a>:
      </p>
      <div class=3D"example">
com.mchange.v2.c3p0.management.ManagementCoordinator=3Dcom.mchange.v2.c3p0.=
management.NullManagementCoordinator     =20
      </div>
      <h3>
	<a name=3D"configuring_logging">Configuring Logging</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	c3p0 uses a custom logging library similar to jakarta commons-logging. Log=
 messages can be directed to
	the to the popular <a href=3D"http://www.slf4j.org/">slf4j</a> (with its <=
a href=3D"http://logback.qos.ch/">logback backend</a>),=20
	to the venerable log4j library,
	to the standard logging facility introduced with jdk1.4, or to
	<tt>System.err</tt>. Nearly all configuration should be done at the level =
of your preferred logging
	library. There are a very few configuration options specific to c3p0's log=
ging, and usually the defaults
	will be fine. Logging-related parameters
	may be placed in your <tt>c3p0.properties</tt> file, in=20
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf">HOCO=
N configuration files</a>, in a file called <tt>mchange-log.properties</tt>=
 at
	the top-level of your classpath, or they may be defined as System properti=
es. (The logging properties defined
	below may <u>not</u> be defined in <tt>c3p0-config.xml</tt>!) See the=20
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#log_properties_=
box">box</a> below.
      </p>
      <p>
	c3p0's logging behavior is affected by certain build-time options. If buil=
d-option <tt>c3p0.debug</tt> is set
	to <tt>false</tt>, all messages at a logging level below INFO will be supp=
ressed. Build-option <tt>c3p0.trace</tt> controls how fine-grained c3p0's b=
elow
	INFO level reporting will be. For the moment, distributed
	c3p0 binaries are compiled with <tt>debug</tt> set to <tt>true</tt> and <t=
t>trace</tt> set to its maximum level of <tt>10</tt>.
	But binaries may eventually be
	distributed with <tt>debug</tt> set to <tt>false</tt>. (For the moment, th=
e performance impact of the logging level-checks seems
	very small, and it's most flexible to compile in all the messages, and let=
 your logging library control which are emitted.) When
	c3p0 starts up, it emits the build-time values of debug and trace, along w=
ith the version and build time.
      </p>
      <dl class=3D"log_properties">
	<a name=3D"log_properties_box"></a>
	<dt><a name=3D"com.mchange.v2.log.MLog">com.mchange.v2.log.MLog</a></dt><a=
 name=3D"com.mchange.v2.log.MLog">
	<dd>
	  <div class=3D"propdesc">
	    Determines which library c3p0 will output log messages to. By default,=
 if slf4j is available,
	    it will use that library, otherwise log4j if available, otherwise jdk1=
.4 logging apis,
	    and if all are unavailable, it will fallback to logging via <tt>System=
.err</tt>.
	    If you want to directly control which library is used, you may set thi=
s property to one of:
	    <ul>
	      <li><tt>com.mchange.v2.log.slf4j.Slf4jMLog</tt></li>
	      <li><tt>com.mchange.v2.log.log4j.Log4jMLog</tt></li>
	      <li><tt>com.mchange.v2.log.jdk14logging.Jdk14MLog</tt></li>
	      <li><tt>com.mchange.v2.log.FallbackMLog</tt></li>
	    </ul>
	    Alternatively, the following abbreviations are supported:
	    <ul>
	      <li><tt>slf4j</tt></li>
	      <li><tt>log4j</tt></li>
	      <li><tt>jul, jdk14, java.util.logging</tt></li>
	      <li><tt>fallback</tt></li>
	    </ul>
	    You may also set this property to a comma separated list of any mix th=
e above alternatives, to
	    define an order of preference among logging libraries.
	  </div>
	</dd>
	</a><dt><a name=3D"com.mchange.v2.log.MLog"></a><a name=3D"com.mchange.v2.=
log.jdk14logging.suppressStackWalk">com.mchange.v2.log.jdk14logging.suppres=
sStackWalk</a></dt><a name=3D"com.mchange.v2.log.jdk14logging.suppressStack=
Walk">
	<dd>
	  <div class=3D"propdesc">
	    Under JDK standard logging, the logging library may inspect stack trac=
es to determine the class
	    and method from which a log message was generated. That can be helpful=
, but it is also slow.
	    Setting this configuration parameter to true will suppress this stack =
walk, and reduce the
	    overhead of logging. <b>This property now defaults to <tt>true</tt>,
	    and logger names are logged in place of class names.</b> To return to =
the original slower but
	    more informative approach, explicitly set the property to false.
	  </div>
	</dd>
	</a><dt><a name=3D"com.mchange.v2.log.jdk14logging.suppressStackWalk"></a>=
<a name=3D"com.mchange.v2.log.NameTransformer">com.mchange.v2.log.NameTrans=
former</a></dt><a name=3D"com.mchange.v2.log.NameTransformer">
	<dd>
	  <div class=3D"propdesc">
	    By default, c3p0 uses very fine-grained logging, in general with one l=
ogger for each
	    c3p0 class. For a variety of reasons, some users may prefer fewer, mor=
e global loggers.
	    You may opt for one-logger-per-package by setting <tt>com.mchange.v2.l=
og.NameTransformer</tt>
	    to the value <tt>com.mchange.v2.log.PackageNames</tt>. Advanced users =
can also define=20
	    other strategies for organizing the number and names of loggers by set=
ting this variable
	    to the fully-qualified class name of a custom implementation of the=20
	    <tt>com.mchange.v2.log.NameTransformer</tt> interface.
	  </div>
	</dd>
	</a><dt><a name=3D"com.mchange.v2.log.NameTransformer"></a><a name=3D"com.=
mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL">com.mchange.v2.log.Fallba=
ckMLog.DEFAULT_CUTOFF_LEVEL</a></dt><a name=3D"com.mchange.v2.log.FallbackM=
Log.DEFAULT_CUTOFF_LEVEL">
	<dd>
	  <div class=3D"propdesc">
	    If, whether by choice or by necessity, you are using c3p0's <tt>System=
.err</tt> fallback logger, you can
	    use this parameter to control how detailed c3p0's logging should be. A=
ny of the following values (taken
	    from the jdk1.4 logging library) are acceptable:
	    <ul>
	      <li><tt>OFF</tt></li>
	      <li><tt>SEVERE</tt></li>
	      <li><tt>WARNING</tt></li>
	      <li><tt>INFO</tt></li>
	      <li><tt>CONFIG</tt></li>
	      <li><tt>FINE</tt></li>
	      <li><tt>FINER</tt></li>
	      <li><tt>FINEST</tt></li>
	      <li><tt>ALL</tt></li>
	    </ul>
	    This property defaults to <tt>INFO</tt>.
	  </div>
	</dd>
      </a></dl><a name=3D"com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LE=
VEL">
      </a><h3><a name=3D"com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEV=
EL">
	</a><a name=3D"named_configurations">Named configurations</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	You can define <i>named configurations</i> which augment and override the =
default
	configuration that you define. When you instantiate a c3p0 <tt>PooledDataS=
ource</tt>, whether=20
	via the=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html#ComboPooledDataSource(java.lang.String)"><tt>C=
omboPooledDataSource</tt></a>=20
	constructor or via the=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DataSources.html#pooledDataSource(javax.sql.DataSource, java.lang.String)=
"><tt>DataSources</tt></a>
	factory class, you can supply a configuration name.
	For example, using
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/ComboPooledDataSource.html"><tt>ComboPooledDataSource</tt></a>:
      </p>
      <div class=3D"example">
ComboPooledDataSource cpds =3D new ComboPooledDataSource("intergalactoApp")=
; =20
      </div>
      <p>
	Or using the
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/DataSources.html"><tt>DataSources</tt></a> factory class:
      </p>
      <div class=3D"example">
DataSource ds_pooled =3D DataSources.pooledDataSource( ds_unpooled, "interg=
alactoApp" );
      </div>
      <p>
	To <i>define</i> named configurations...=20
      </p>
      <div style=3D"margin-left: 2em">
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_pro=
perties">properties-style config file</a>...
	</p>
	<div class=3D"example">
# define default-config param values
c3p0.maxPoolSize=3D30
c3p0.minPoolSize=3D10

# define params for a named config called intergalactoApp
c3p0.named-configs.intergalactoApp.maxPoolSize=3D1000
c3p0.named-configs.intergalactoApp.minPoolSize=3D100
c3p0.named-configs.intergalactoApp.numHelperThreads=3D50

# define params for a named config called littleTeenyApp
c3p0.named-configs.littleTeenyApp.maxPoolSize=3D5
c3p0.named-configs.littleTeenyApp.minPoolSize=3D2
	</div>
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_con=
f">HOCON config file</a>...
	</p>
	<div class=3D"example">
c3p0 {
  maxPoolSize=3D30
  minPoolSize=3D10

  named-configs {
    intergalactoApp {
      maxPoolSize=3D1000
      minPoolSize=3D100
      numHelperThreads=3D50
    }
    littleTeenyApp {
      maxPoolSize=3D5
      minPoolSize=3D2
    }
  }
}
	</div>
	<p>
	  In an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-co=
nfig.xml">XML config file</a>...
	</p>
	<div class=3D"example">
&lt;c3p0-config&gt;

  &lt;default-config&gt;
    &lt;property name=3D"maxPoolSize"&gt;30&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;10&lt;/property&gt;
  &lt;/default-config&gt;

  &lt;named-config name=3D"intergalactoApp"&gt;
    &lt;property name=3D"maxPoolSize"&gt;1000&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;100&lt;/property&gt;
    &lt;property name=3D"numHelperThreads"&gt;50&lt;/property&gt;
  &lt;/named-config&gt;

  &lt;named-config name=3D"littleTeenyApp"&gt;
    &lt;property name=3D"maxPoolSize"&gt;5&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;2&lt;/property&gt;
  &lt;/named-config&gt;

&lt;/c3p0-config&gt;
	</div>
      </div>
      <h3>
	<a name=3D"per-user_configurations">Per-user configurations</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	You can define overrides of default or named configurations that apply onl=
y
	to pools of Connections authenticated for a particular user. Not all confi=
guration parameters
	support per-user overrides. See <a href=3D"http://www.mchange.com/projects=
/c3p0/appendix_a">Appendix A</a> for details.
      </p><p>
	To define per-user configurations...=20
      </p>
      <div style=3D"margin-left: 2em">
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_pro=
perties">properties-style config file</a>...
	</p>
	<div class=3D"example">
# define default-config param values
c3p0.maxPoolSize=3D30
c3p0.minPoolSize=3D10

# define params for a user called 'steve'
c3p0.user-overrides.steve.maxPoolSize=3D15
c3p0.user-overrides.steve.minPoolSize=3D5

# define params for a user called 'ramona'
c3p0.user-overrides.steve.maxPoolSize=3D50
c3p0.user-overrides.steve.minPoolSize=3D20
	</div>
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_con=
f">HOCON config file</a>...
	</p>
	<div class=3D"example">
c3p0 {
  maxPoolSize=3D30
  minPoolSize=3D10

  user-overrides {
    steve {
      maxPoolSize=3D15
      minPoolSize=3D5
    }
    ramona {
      maxPoolSize=3D50
      minPoolSize=3D20
    }
  }
}
	</div>
	<p>
	  In an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-co=
nfig.xml">XML config file</a>...
	</p>
	<div class=3D"example">
&lt;c3p0-config&gt;

  &lt;default-config&gt;

    &lt;property name=3D"maxPoolSize"&gt;30&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;10&lt;/property&gt;

    &lt;user-overrides user=3D"steve"&gt;
      &lt;property name=3D"maxPoolSize"&gt;15&lt;/property&gt;
      &lt;property name=3D"minPoolSize"&gt;5&lt;/property&gt;
    &lt;/user-overrides&gt;

    &lt;user-overrides user=3D"ramona"&gt;
      &lt;property name=3D"maxPoolSize"&gt;50&lt;/property&gt;
      &lt;property name=3D"minPoolSize"&gt;20&lt;/property&gt;
    &lt;/user-overrides&gt;

  &lt;/default-config&gt;

&lt;/c3p0-config&gt;
	</div>
      <h3>
	<a name=3D"user_extensions_to_configurations">User extensions to configura=
tion</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Users can add their own configuration information, usually to customize th=
e behavior of=20
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#connection_cust=
omizers"><tt>ConnectionCustomizers</tt></a>. User configuration is=20
	stored as a <tt>Map</tt> containing <tt>String</tt> keys and values, store=
d under the following
	configuration parameter:
      </p>
      <ul>
	<li><a class=3D"cfg_param" href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#extensions">extensions</a></li>
      </ul>
      <p>
	The extensions <tt>Map</tt> can be set programatically like any other conf=
iguration parameter.
	However, there is special support for defining keys and values for the ext=
ensions <tt>Map</tt>
	in configuration files. In a <a href=3D"http://www.mchange.com/projects/c3=
p0/index.html#c3p0_properties">properties-style config file</a>...
      </p>
      <div class=3D"example">
c3p0.extensions.initSql=3DSET SCHEMA 'foo'
c3p0.extensions.timezone=3DPDT
...
      </div>
      <p>
	In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf"=
>HOCON config file</a>...
      </p>
      <div class=3D"example">
c3p0 {
  extensions {
     initSql=3DSET SCHEMA 'foo'
     timezone=3DPDT
  }
}
      </div>
      <p>
	In an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-conf=
ig.xml">XML config file</a>...
      </p>
      <div class=3D"example">
&lt;c3p0-config&gt;
  &lt;default-config&gt;
    &lt;extensions&gt;
      &lt;property name=3D"initSql"&gt;SET SCHEMA 'foo'&lt;/property&gt;
      &lt;property name=3D"timezone"&gt;PDT&lt;/property&gt;
    &lt;/extensions&gt;
  &lt;/default-config&gt;
&lt;/c3p0-config&gt;
      </div>
      <p>
	To find the extensions defined for a <tt>PooledDataSource</tt>, you must h=
ave access to its
	<tt>identityToken</tt>, which is supplied as an argument to all=20
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#connection_cust=
omizer"><tt>ConnectionCustomizer</tt></a> methods. Given an <tt>identityTok=
en</tt>,
	you can use the method=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/C3P0Registry.html#extensionsForToken(java.lang.String)"><tt>C3P0Registry.=
extensionsForToken(...)</tt></a> to access the extensions <tt>Map</tt>.
      </p>
      <p>
	Because extensions are primary designed to be used within <tt>ConnectionCu=
stomizer</tt> implementations,=20
	the <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2=
/c3p0/AbstractConnectionCustomizer.html"><tt>AbstractConnectionCustomizer</=
tt></a>
	class also defines a protected=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p=
0/AbstractConnectionCustomizer.html#extensionsForToken(java.lang.String)">e=
xtensionsForToken(...)</a> method as a convenience.=20
      </p>
      <p>
	Here is an example <tt>ConnectionCustomizer</tt> implementation that makes=
 use of user-defined configuration=20
	extensions. It defines an <tt>initSql</tt> extension, whose value should b=
e a <tt>String</tt> containing
	SQL that should be executed when a <tt>Connection</tt> is checked out from=
 the pool:
      </p>
      <div class=3D"example">
package mypkg;

import java.sql.*;
import com.mchange.v2.c3p0.AbstractConnectionCustomizer;

public class InitSqlConnectionCustomizer extends AbstractConnectionCustomiz=
er
{
    private String getInitSql( String parentDataSourceIdentityToken )
    { return (String) extensionsForToken( parentDataSourceIdentityToken ).g=
et ( "initSql" ); }

    public void onCheckOut( Connection c, String parentDataSourceIdentityTo=
ken  ) throws Exception
    {
	String initSql =3D getInitSql( parentDataSourceIdentityToken );
	if ( initSql !=3D null )
	{
	    Statement stmt =3D null;
	    try
	    {
		stmt =3D c.createStatement();
		stmt.executeUpdate( initSql );
	    }
	    finally
	    { if ( stmt !=3D null ) stmt.close(); }
	}
    }
}
      </div>
      <div class=3D"boxed">
	Note: There's no need to implement your own <tt>ConnectionCustomizer</tt> =
if you
	just want <tt>initSql</tt>. This example, plus a bit of extra TRACE-level =
logging,
	is implemented within the library as=20
	<a href=3D"https://github.com/swaldman/c3p0/blob/master/src/java/com/mchan=
ge/v2/c3p0/example/InitSqlConnectionCustomizer.java"><tt>com.mchange.v2.c3p=
0.example.InitSqlConnectionCustomizer</tt></a>.
      </div>
      <h3>
	<a name=3D"mixing_named_per-user_extensions">Mixing named, per-user, and u=
ser-defined configuration extensions</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	Named configurations, per-user overrides, and user-defined configuration e=
xtensions can easily
	be mixed.
      </p>
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_pro=
perties">properties-style config file</a>...
	</p>
	<div class=3D"example">
c3p0.maxPoolSize=3D30
c3p0.extensions.initSql=3DSET SCHEMA 'default'

c3p0.named-configs.intergalactoApp.maxPoolSize=3D1000
c3p0.named-configs.intergalactoApp.extensions.initSql=3DSET SCHEMA 'interga=
lacto'
c3p0.named-configs.user-overrides.steve.maxPoolSize=3D20
	</div>
	<p>
	  In a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_con=
f">HOCON config file</a>...
	</p>
	<div class=3D"example">
c3p0 {
  maxPoolSize=3D30
  extensions {
    initSql=3DSET SCHEMA 'default'
  }
  named-configs {
    intergalactoApp {
      maxPoolSize=3D1000
      user-overrides {
        steve {
          maxPoolSize=3D20
        }
      }
      extensions {
        initSql=3DSET SCHEMA 'intergalacto'
      }
    }
  }
}
	</div>
	<p>
	  In an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-co=
nfig.xml">XML config file</a>...
	</p>
	<div class=3D"example">
&lt;c3p0-config&gt;

  &lt;default-config&gt;
    &lt;property name=3D"maxPoolSize"&gt;30&lt;/property&gt;
    &lt;extensions&gt;
      &lt;property name=3D"initSql"&gt;SET SCHEMA 'default'&lt;/property&gt=
;
    &lt;/extensions&gt;
  &lt;/default-config&gt;

  &lt;named-config name=3D"intergalactoApp"&gt;
    &lt;property name=3D"maxPoolSize"&gt;1000&lt;/property&gt;
    &lt;user-overrides name=3D"steve"&gt;
      &lt;property name=3D"maxPoolSize"&gt;20&lt;/property&gt;
    &lt;/user-overrides&gt;
    &lt;extensions&gt;
      &lt;property name=3D"initSql"&gt;SET SCHEMA 'intergalacto'&lt;/proper=
ty&gt;
    &lt;/extensions&gt;
  &lt;/named-config&gt;

&lt;/c3p0-config&gt;
	</div>

    </div>
    <h2><a name=3D"performance">Performance</a><span class=3D"toplink"><a h=
ref=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=
=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"=
Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	Enhanced performance is the purpose of Connection and Statement pooling, a=
nd a
	major goal of the c3p0 library. For most applications, Connection pooling
	will provide a significant performance gain, especially if you are acquiri=
ng
	an unpooled Connection for each client access. If you are letting a single=
,
	shared Connection serve many clients to avoid Connection acquisition overh=
ead,=20
	you may suffer performance issues and problems managing transactions when=
=20
	your Connection is under concurrent load; Connection pooling will enable y=
ou=20
	to switch to a one Connection-per-client model with little or no cost.=20
	If you are writing Enterprise Java Beans, you may be tempted to acquire a=
=20
	Connection once and not return it until the bean is about to be destroyed =
or
	passivated. But this can be resource-costly, as dormant pooled=20
	beans needlessly hold the Connection's network and database resources.=20
	Connection pooling permits beans to only "own"=20
	a Connection while they are using it. =20
      </p>
      <p>
	But, there are performance costs to c3p0 as well. In order to implement=20
	automatic cleanup of unclosed <tt>ResultSets</tt> and <tt>Statements</tt> =
when parent resources=20
	are returned to pools, all client-visible <tt>Connections</tt>, <tt>Result=
Sets</tt>, <tt>Statements</tt>=20
	are really wrappers around objects provided by an underlying unpooled Data=
Source=20
	or "traditional" JDBC driver. Thus, there is some extra overhead to all JD=
BC calls.
      </p>
      <p>
	Some attention has been paid to minimizing the "wrapper" overhead of c3p0.=
 In
	my environment, the wrapper overhead amounts from several hundreths to sev=
eral
	thousandths of the cost of Connection acquisition, so unless you are makin=
g
	many, many JDBC calls in fast succession, there will be a net=20
	gain in performance and resource-utilization efficiency.=20
	Significantly, the overhead associated with ResultSet operations (where
	one might iterate through a table with thousands of records) appears to be=
=20
	negligibly small.
      </p>
    </div>
    <h2><a name=3D"known_shortcomings">Known Shortcomings</a><span class=3D=
"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/index.html#conten=
ts"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D=
"20" alt=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <ul>
	<li>
	  <p>
	    Connections and Statements are pooled on a per-authentication basis.
	    So, if one pool-backed DataSource is used to acquire Connections both
	    for [<tt>user</tt>=3Dalice, <tt>password</tt>=3Dsecret1] and [<tt>user=
</tt>=3Dbob, <tt>password</tt>=3Dsecret2],
	    there will be two distinct pools, and the DataSource might in the
	    worst case manage twice the number of Connections specified by the
	    <tt>maxPoolSize</tt> property.
	  </p>
	  <p>
	    This fact is a natural consequence of the definition of the DataSource=
 spec (which
	    allows Connections to be acquired with multiple user authentications),=
 and the
	    requirement that all Connections in a single pool be functionally iden=
tical.
	    This "issue" will not be changed or fixed. It's noted here just so you=
 understand
	    what's going on.
	  </p>
	</li>
	<li>
	  <p>
	    The overhead of Statement pooling is too high. For drivers that
	    do not perform significant preprocessing of PreparedStatements, the
	    pooling overhead outweighs any savings. Statement pooling is thus
	    turned off by default. If your driver does preprocess <tt>PreparedStat=
ements</tt>,
	    especially if it does so via IPC with the RDBMS, you will probably
	    see a significant performance gain by turning Statement pooling on. (D=
o this by
	    setting the configuration property <tt>maxStatements</tt> or <tt>maxSt=
atementsPerConnection</tt>
	    to a value greater than zero.).
	  </p>
	</li>
      </ul>
    </div>
    <h2><a name=3D"feedback_and_support">Feedback and Support</a><span clas=
s=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
ntents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png" widt=
h=3D"20" alt=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	Please provide any and all feedback to &lt;<a href=3D"mailto:swaldman@mcha=
nge.com">swaldman@mchange.com</a>&gt;!=20
	Also, feel free to join and ask questions on the <tt>c3p0-users</tt> maili=
ng list.
	Sign up at <a href=3D"http://sourceforge.net/projects/c3p0/">http://source=
forge.net/projects/c3p0/</a>
      </p>
      <p> =20
	Thank you for using c3p0!!!
      </p>
    </div>
    <h2><a name=3D"configuration_properties">Appendix A: Configuration Prop=
erties</a><span class=3D"toplink"><a href=3D"http://www.mchange.com/project=
s/c3p0/index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p=
0/arrow_sm.png" width=3D"20" alt=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	c3p0 configuration properties can be divided into <a href=3D"http://www.mc=
hange.com/projects/c3p0/index.html#javabeans-style-properties">JavaBeans-st=
yle Properties</a> and
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#other-propertie=
s">Other Properties</a>.
      </p>
      <h3>
	<a name=3D"javabeans-style-properties">JavaBeans-style Properties</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	The following properties can be set directly in code as JavaBeans properti=
es,=20
	via a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#system_pr=
operties">System properties</a> or a <a href=3D"http://www.mchange.com/proj=
ects/c3p0/index.html#c3p0_properties"><tt>c3p0.properties</tt></a>  file
	(with <tt>c3p0.</tt> prepended to
	the property name), in <a href=3D"http://www.mchange.com/projects/c3p0/ind=
ex.html#c3p0_conf">HOCON (typesafe-config) files</a>, or in a <a href=3D"ht=
tp://www.mchange.com/projects/c3p0/index.html#c3p0-config.xml"><tt>c3p0-con=
fig.xml</tt></a> file. See the section on=20
	<a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuration">=
Configuration</a> above.
	Click on the property name for a full description.=20
      </p>
      <table class=3D"beanPropSummaryTable">
	<tbody><tr>
	  <td>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#acquireIncr=
ement">acquireIncrement</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#acquireRetr=
yAttempts">acquireRetryAttempts</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#acquireRetr=
yDelay">acquireRetryDelay</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#autoCommitO=
nClose">autoCommitOnClose</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#automaticTe=
stTable">automaticTestTable</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#breakAfterA=
cquireFailure">breakAfterAcquireFailure</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#checkoutTim=
eout">checkoutTimeout</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#connectionC=
ustomizerClassName">connectionCustomizerClassName</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#connectionT=
esterClassName">connectionTesterClassName</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#contextClas=
sLoaderSource">contextClassLoaderSource</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#dataSourceN=
ame">dataSourceName</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#debugUnretu=
rnedConnectionStackTraces">debugUnreturnedConnectionStackTraces</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#driverClass=
">driverClass</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#extensions"=
>extensions</a><br>
	  </td>
	  <td>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#factoryClas=
sLocation">factoryClassLocation</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceIgnore=
UnresolvedTransactions">forceIgnoreUnresolvedTransactions</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceSynchr=
onousCheckins">forceSynchronousCheckins</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceUseNam=
edDriverClass">forceUseNamedDriverClass</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#idleConnect=
ionTestPeriod">idleConnectionTestPeriod</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#initialPool=
Size">initialPoolSize</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdbcUrl">jd=
bcUrl</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxAdminist=
rativeTaskTime">maxAdministrativeTaskTime</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxConnecti=
onAge">maxConnectionAge</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxIdleTime=
">maxIdleTime</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxIdleTime=
ExcessConnections">maxIdleTimeExcessConnections</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxPoolSize=
">maxPoolSize</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxStatemen=
ts">maxStatements</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#maxStatemen=
tsPerConnection">maxStatementsPerConnection</a><br>
	  </td>
	  <td>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#minPoolSize=
">minPoolSize</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#numHelperTh=
reads">numHelperThreads</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#overrideDef=
aultUser">overrideDefaultUser</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#overrideDef=
aultPassword">overrideDefaultPassword</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#password">p=
assword</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#preferredTe=
stQuery">preferredTestQuery</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#privilegeSp=
awnedThreads">privilegeSpawnedThreads</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#propertyCyc=
le">propertyCycle</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#statementCa=
cheNumDeferredCloseThreads">statementCacheNumDeferredCloseThreads</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#testConnect=
ionOnCheckin">testConnectionOnCheckin</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#testConnect=
ionOnCheckout">testConnectionOnCheckout</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#unreturnedC=
onnectionTimeout">unreturnedConnectionTimeout</a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#user">user<=
/a><br>
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#usesTraditi=
onalReflectiveProxies"><s>usesTraditionalReflectiveProxies</s></a><br>
	  </td>
	</tr>
      </tbody></table>
      <dl class=3D"properties">
	<dt><a name=3D"acquireIncrement">acquireIncrement</a></dt><a name=3D"acqui=
reIncrement">
	</a><dd><a name=3D"acquireIncrement">
	  <div class=3D"default">Default: 3</div>
	  </a><div class=3D"propdesc"><a name=3D"acquireIncrement">
	    Determines how many connections at a time c3p0 will try to acquire whe=
n the pool is exhausted.=20
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ba=
sic_pool_configuration">"Basic Pool Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"acquireRetryAttempts">acquireRetryAttempts</a></dt><a name=
=3D"acquireRetryAttempts">
	</a><dd><a name=3D"acquireRetryAttempts">
	  <div class=3D"default">Default: 30</div>
	  </a><div class=3D"propdesc"><a name=3D"acquireRetryAttempts">
	    Defines how many times c3p0 will try to acquire a new Connection from =
the database before giving up. If
	    this value is less than or equal to zero, c3p0 will keep trying to fet=
ch a Connection indefinitely.	 =20
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_recovery">"Configuring Recovery From Database Outages"</a>]
	  </div>
	</dd>
	<dt><a name=3D"acquireRetryDelay">acquireRetryDelay</a></dt><a name=3D"acq=
uireRetryDelay">
	</a><dd><a name=3D"acquireRetryDelay">
	  <div class=3D"default">Default: 1000</div>
	  </a><div class=3D"propdesc"><a name=3D"acquireRetryDelay">
	    Milliseconds, time c3p0 will wait between acquire attempts.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_recovery">"Configuring Recovery From Database Outages"</a>]
	  </div>
	</dd>
	<dt><a name=3D"autoCommitOnClose">autoCommitOnClose</a></dt><a name=3D"aut=
oCommitOnClose">
	</a><dd><a name=3D"autoCommitOnClose">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"autoCommitOnClose">
	    The JDBC spec is unforgivably silent on what should happen to unresolv=
ed, pending
            transactions on Connection close. C3P0's default policy is to r=
ollback any uncommitted, pending
            work. (I think this is absolutely, undeniably the right policy,=
 but there is no consensus among JDBC driver vendors.)=20
            Setting <tt>autoCommitOnClose</tt> to true causes uncommitted p=
ending work to be committed, rather than rolled
            back on Connection close. [<i>Note: Since the spec is absurdly =
unclear on this question, application authors who wish
              to avoid bugs and inconsistent behavior should ensure that al=
l transactions are explicitly either committed or
              rolled-back before close is called.</i>]
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_unresolved">"Configuring Unresolved Transaction Handling"</a>]
	  </div>
	</dd>
	<dt><a name=3D"automaticTestTable">automaticTestTable</a></dt><a name=3D"a=
utomaticTestTable">
	</a><dd><a name=3D"automaticTestTable">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"automaticTestTable">
	    If provided, c3p0 will create an empty table of the specified name, an=
d use queries against that table to
	    test the Connection. If <tt>automaticTestTable</tt> is provided, c3p0 =
will generate its own test query, therefore
	    any <tt>preferredTestQuery</tt> set will be ignored. You should not wo=
rk with the named table after c3p0 creates
	    it; it should be strictly for c3p0's use in testing your Connection. (=
If you define your own ConnectionTester, it
	    must implement the </a><a href=3D"http://www.mchange.com/projects/c3p0=
/apidocs/com/mchange/v2/c3p0/QueryConnectionTester.html">QueryConnectionTes=
ter</a>
	    interface for this parameter to be useful.) [See <a href=3D"http://www=
.mchange.com/projects/c3p0/index.html#configuring_connection_testing">"Conf=
iguring Connection Testing"</a>]
	  </div>
	</dd>
	<dt><a name=3D"breakAfterAcquireFailure">breakAfterAcquireFailure</a></dt>=
<a name=3D"breakAfterAcquireFailure">
	</a><dd><a name=3D"breakAfterAcquireFailure">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"breakAfterAcquireFailure">
	    If true, a pooled DataSource will declare itself broken and be permane=
ntly closed if
	    a Connection cannot be obtained from the database after making <tt>acq=
uireRetryAttempts</tt> to acquire one.
	    If false, failure to obtain a Connection will cause all Threads waitin=
g for the pool to acquire a Connection
	    to throw an Exception, but the DataSource will remain valid, and will =
attempt to acquire again following
	    a call to <tt>getConnection()</tt>.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_recovery">"Configuring Recovery From Database Outages"</a>]
	  </div>
	</dd>
	<dt><a name=3D"checkoutTimeout">checkoutTimeout</a></dt><a name=3D"checkou=
tTimeout">
	<dd>
	  <div class=3D"default">Default: 0</div>
	  <div class=3D"propdesc">
	    The number of milliseconds a client calling getConnection() will wait =
for a Connection to be checked-in or acquired
	    when the pool is exhausted. Zero means wait indefinitely. Setting any =
positive value will cause the getConnection()
	    call to time-out and break with an <tt>SQLException</tt> after the spe=
cified number of milliseconds.
	  </div>
	</dd>
	</a><dt><a name=3D"checkoutTimeout"></a><a name=3D"connectionCustomizerCla=
ssName">connectionCustomizerClassName</a></dt><a name=3D"connectionCustomiz=
erClassName">
	</a><dd><a name=3D"connectionCustomizerClassName">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"connectionCustomizerClassName">
	    The fully qualified class-name of an implememtation of the </a><a href=
=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p0/Connec=
tionCustomizer.html"><tt>ConnectionCustomizer</tt></a>
	    interface, which users can implement to set up Connections when they a=
re acquired from the database, or on check-out, and potentially
	    to clean things up on check-in and Connection destruction. If standard=
 Connection properties (holdability, readOnly, or transactionIsolation)
	    are set in the ConnectionCustomizer's onAcquire() method, these will o=
verride the Connection default values.
	  </div>
	</dd>
	<dt><a name=3D"connectionTesterClassName">connectionTesterClassName</a></d=
t><a name=3D"connectionTesterClassName">
	</a><dd><a name=3D"connectionTesterClassName">
	  <div class=3D"default">Default: com.mchange.v2.c3p0.impl.DefaultConnecti=
onTester</div>
	  </a><div class=3D"propdesc"><a name=3D"connectionTesterClassName">
	    The fully qualified class-name of an implememtation of the </a><a href=
=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p0/Connec=
tionTester.html"><tt>ConnectionTester</tt></a>
	    interface, or <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/=
com/mchange/v2/c3p0/QueryConnectionTester.html"><tt>QueryConnectionTester</=
tt></a> if you would like instances
	    to have access to a user-configured <tt>preferredTestQuery</tt>. This =
can be used to customize how c3p0 DataSources test Connections, but with
	    the introduction of <tt>automaticTestTable</tt> and <tt>preferredTestQ=
uery</tt> configuration parameters, "rolling your own" should be overkill
	    for most users.
	    [See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#config=
uring_connection_testing">"Configuring Connection Testing"]</a>
	  </div>
	</dd>
	<dt><a name=3D"contextClassLoaderSource">contextClassLoaderSource</a></dt>=
<a name=3D"contextClassLoaderSource">
	</a><dd><a name=3D"contextClassLoaderSource">
	  <div class=3D"default">Default: caller</div>
	  </a><div class=3D"propdesc"><a name=3D"contextClassLoaderSource">
	    Must be one of <tt>caller</tt>,  <tt>library</tt>, or <tt>none</tt>. D=
etermines how the <tt>contextClassLoader</tt> (see <tt>java.lang.Thread</tt=
>)
	    of c3p0-spawned Threads is determined. If <tt>caller</tt>, c3p0-spawne=
d Threads (</a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#n=
umHelperThreads">helper threads</a>, <tt>java.util.Timer</tt> threads)=20
	    inherit their <tt>contextClassLoader</tt> from the client Thread that =
provokes initialization of the pool.
	    If <tt>library</tt>, the <tt>contextClassLoader</tt> will be the class=
 that loaded c3p0 classes. If <tt>none</tt>, no <tt>contextClassLoader</tt>=
 will be set
	    (the property will be <tt>null</tt>), which in practice means the syst=
em ClassLoader will be used. The default setting of <tt>caller</tt> is some=
times
	    a problem when client applications will be hot redeployed by an app-se=
rver.
	    When c3p0's Threads hold a reference
	    to a <tt>contextClassLoader</tt> from the first client that hits them,=
 it may be impossible to garbage collect a <tt>ClassLoader</tt>
	    associated with that client when it is undeployed in a running VM. Set=
ting this to <tt>library</tt> can resolve these issues.=20
            [See "<a href=3D"http://www.mchange.com/projects/c3p0/index.htm=
l#configuring_to_avoid_memory_leaks_on_redeploy">Configuring To Avoid Memor=
y Leaks On Hot Redeploy Of Client</a>"]
	    <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	  </div>
	</dd>
	<dt><a name=3D"dataSourceName">dataSourceName</a></dt><a name=3D"dataSourc=
eName">
	</a><dd><a name=3D"dataSourceName">
	  </a><div class=3D"default"><a name=3D"dataSourceName">Default: if config=
ured with a </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#=
named_configurations">named config</a>, the config name, otherwise the pool=
's "identity token"</div>
	  <div class=3D"propdesc">
	       Every c3p0 pooled data source is given a <tt>dataSourceName</tt>, w=
hich serves two purposes. It helps users find DataSources via
	       <a href=3D"http://www.mchange.com/projects/c3p0/index.html#using_c3=
p0_registry_box">C3P0Registry</a>, and it is included in the name of JMX mB=
eans in order to help=20
	       track and distinguish between multiple c3p0 DataSources even across=
 application or JVM restarts. <tt>dataSourceName</tt>
	       defaults to the pool's configuration name, if a <a href=3D"http://w=
ww.mchange.com/projects/c3p0/index.html#named_configurations">named config<=
/a> was used, or else to an "identity token" (an
	       opaque, guaranteed unique String associated with every c3p0 DataSou=
rce). You may update this property to any name you find convenient.
	       <tt>dataSourceName</tt> is <i>not</i> guaranteed to be unique =E2=
=80=94 for example, multiple DataSource created from the same named
	       configuration will share the same <tt>dataSourceName</tt>. But if y=
ou are going to make use of <tt>dataSourceName</tt>,
	       you will probably want to ensure that all pooled DataSources within=
 your JVM do have unique names.
	  </div>
	</dd>
	<dt><a name=3D"debugUnreturnedConnectionStackTraces">debugUnreturnedConnec=
tionStackTraces</a></dt><a name=3D"debugUnreturnedConnectionStackTraces">
	</a><dd><a name=3D"debugUnreturnedConnectionStackTraces">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"debugUnreturnedConnectionStackTra=
ces">
		If true, and if <tt></tt></a><tt><a href=3D"http://www.mchange.com/projec=
ts/c3p0/index.html#unreturnedConnectionTimeout">unreturnedConnectionTimeout=
</a></tt> is set to a positive value,
		then the pool will capture the stack trace (via an Exception) of all Conn=
ection checkouts, and the stack traces will be
		printed when unreturned checked-out Connections timeout. This is intended=
 to debug applications with Connection leaks, that
		is applications that occasionally fail to return Connections, leading to =
pool growth, and eventually exhaustion (when the
		pool hits <tt>maxPoolSize</tt> with all Connections checked-out and lost)=
. This parameter should only be set while debugging,
		as capturing the stack trace will slow down every Connection check-out.=
=20
		[See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuri=
ng_to_debug_and_workaround_broken_clients">"Configuring to Debug and Workar=
ound Broken Client Applications"</a>]
	  </div>
	</dd>
	<dt><a name=3D"driverClass">driverClass</a></dt><a name=3D"driverClass">
	</a><dd><a name=3D"driverClass">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"driverClass">
	    The fully-qualified class name of the JDBC driverClass that is expecte=
d to provide Connections. c3p0 will preload any class specified
	    here to ensure that appropriate URLs may be resolved to an instance of=
 the driver by <tt>java.sql.DriverManager</tt>. If you wish to skip
	    <tt>DriverManager</tt> resolution entirely and ensure that an instance=
 of the specified class is used to provide Connections, use
	    <tt></tt></a><tt><a href=3D"http://www.mchange.com/projects/c3p0/index=
.html#driverClass">driverClass</a></tt> in combination with=20
	    <tt><a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceUs=
eNamedDriverClass">forceUseNamedDriverClass</a></tt>. [See also <tt><a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#jdbcUrl">jdbcUrl</a></t=
t>.]
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"extensions">extensions</a></dt><a name=3D"extensions">
	</a><dd><a name=3D"extensions">
	  <div class=3D"default">Default: an empty <tt>java.util.Map</tt></div>
	  </a><div class=3D"propdesc"><a name=3D"extensions">
	    A <tt>java.util.Map</tt> (raw type) containing the values of any
	    </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#user_ex=
tensions_to_configurations">user-defined configuration extensions</a>=20
	    defined for this DataSource.
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"factoryClassLocation">factoryClassLocation</a></dt><a name=
=3D"factoryClassLocation">
	<dd>
	  <div class=3D"default">Default: null</div>
	  <div class=3D"propdesc">
	    DataSources that will be bound by JNDI and use that API's Referenceabl=
e interface
            to store themselves may specify a URL from which the class capa=
ble of dereferencing=20
            a them may be loaded. If (as is usually the case) the c3p0 libr=
aries will be locally
            available to the JNDI service, leave this set as null.=09
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	</a><dt><a name=3D"factoryClassLocation"></a><a name=3D"forceIgnoreUnresol=
vedTransactions">forceIgnoreUnresolvedTransactions</a></dt><a name=3D"force=
IgnoreUnresolvedTransactions">
	</a><dd><a name=3D"forceIgnoreUnresolvedTransactions">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"forceIgnoreUnresolvedTransactions=
">
	    <b><i>Strongly disrecommended. Setting this to <tt>true</tt> may lead =
to subtle and bizarre bugs.</i></b>
            This is a terrible setting, leave it alone unless absolutely ne=
cessary. It is here to workaround
            broken databases / JDBC drivers that do not properly support tr=
ansactions, but that allow Connections'
            <tt>autoCommit</tt> flags to go to false regardless. If you are=
 using a database that supports transactions
            "partially" (this is oxymoronic, as the whole point of transact=
ions is to perform operations reliably and
            completely, but nonetheless such databases are out there), if y=
ou feel comfortable ignoring the fact that Connections
            with <tt>autoCommit =3D=3D false</tt> may be in the middle of t=
ransactions and may hold locks and other resources,
            you may turn off c3p0's wise default behavior, which is to prot=
ect itself, as well as the usability and consistency
            of the database, by either rolling back (default) or committing=
 (see <tt>c3p0.autoCommitOnClose</tt> <i>above</i>)
            unresolved transactions. <b>This should only be set to true whe=
n you are sure you are using a database that
              allows Connections' autoCommit flag to go to false, but offer=
s no other meaningful support of transactions. Otherwise
              setting this to true is just a bad idea.</b>=09
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_unresolved">"Configuring Unresolved Transaction Handling"</a>]
	  </div>
	</dd>
	<dt><a name=3D"forceSynchronousCheckins">forceSynchronousCheckins</a></dt>=
<a name=3D"forceSynchronousCheckins">
	</a><dd><a name=3D"forceSynchronousCheckins">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"forceSynchronousCheckins">
	    Setting this to <tt>true</tt> forces Connections to be checked-in sync=
hronously, which under some circumstances may
	    improve performance. Ordinarily Connections are checked-in asynchronou=
sly so that clients avoid any overhead of testing or custom check-in
	    logic. However, asynchronous check-in contributes to thread pool conge=
stion, and very busy pools might find clients delayed
	    waiting for check-ins to complete. Expanding <tt>numHelperThreads</tt>=
 can help manage Thread pool congestion, but memory
	    footprint and switching costs put limits on practical thread pool size=
. To reduce thread pool load, you can set
	    <tt>forceSynchronousCheckins</tt> to <tt>true</tt>. Synchronous check-=
ins are likely to improve overall performance when
	    <tt>testConnectionOnCheckin</tt> is set to false and no slow work is p=
erformed in a <tt>ConnectionCustomizer</tt>'s
	    <tt>onCheckIn(...)</tt> method. If Connections are tested or other slo=
w work is performed on check-in, then this setting
	    will cause clients to experience the overhead of that work on <tt>Conn=
ection.close()</tt>, which you must trade-off against
	    any improvements in pool performance.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ot=
her_ds_configuration">"Other DataSource Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"forceUseNamedDriverClass">forceUseNamedDriverClass</a></dt>=
<a name=3D"forceUseNamedDriverClass">
	</a><dd><a name=3D"forceUseNamedDriverClass">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"forceUseNamedDriverClass">
	    Setting the parameter </a><a href=3D"http://www.mchange.com/projects/c=
3p0/index.html#driverClass">driverClass</a> causes that class to preload
	    and register with <tt>java.sql.DriverManager</tt>. However, it does no=
t on its own ensure that=20
	    the driver used will be an instance of <a href=3D"http://www.mchange.c=
om/projects/c3p0/index.html#driverClass">driverClass</a>, as <tt>DriverMana=
ger</tt>
	    may (in unusual cases) know of other driver classes which can handle t=
he specified <a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdb=
cUrl">jdbcUrl</a>.
	    Setting this parameter to true causes c3p0 to ignore <tt>DriverManager=
</tt> and simply instantiate <a href=3D"http://www.mchange.com/projects/c3p=
0/index.html#driverClass">driverClass</a>
	    directly.
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"idleConnectionTestPeriod">idleConnectionTestPeriod</a></dt>=
<a name=3D"idleConnectionTestPeriod">
	</a><dd><a name=3D"idleConnectionTestPeriod">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"idleConnectionTestPeriod">
	    If this is a number greater than 0, c3p0 will test all idle, pooled bu=
t unchecked-out connections,=20
	    every this number of seconds. [See </a><a href=3D"http://www.mchange.c=
om/projects/c3p0/index.html#configuring_connection_testing">"Configuring Co=
nnection Testing"</a>]
	  </div>
	</dd>
	<dt><a name=3D"initialPoolSize">initialPoolSize</a></dt><a name=3D"initial=
PoolSize">
	</a><dd><a name=3D"initialPoolSize">
	  <div class=3D"default">Default: 3</div>
	  </a><div class=3D"propdesc"><a name=3D"initialPoolSize">
	    Number of Connections a pool will try to acquire upon startup. Should =
be between <tt>minPoolSize</tt> and
	    <tt>maxPoolSize</tt>.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ba=
sic_pool_configuration">"Basic Pool Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"jdbcUrl">jdbcUrl</a></dt><a name=3D"jdbcUrl">
	</a><dd><a name=3D"jdbcUrl">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"jdbcUrl">
	    The JDBC URL of the database from which Connections can and should be =
acquired. Should resolve via <tt>java.sql.DriverManager</tt>
	    to an appropriate JDBC Driver (which you can ensure will be loaded and=
 available by setting=20
	    <tt></tt></a><tt><a href=3D"http://www.mchange.com/projects/c3p0/index=
.html#driverClass">driverClass</a></tt>), or if you wish to specify which d=
river to use directly (and avoid <tt>DriverManager</tt>=20
	    resolution), you may specify <a href=3D"http://www.mchange.com/project=
s/c3p0/index.html#driverClass">driverClass</a> in combination with=20
	    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#forceUseNam=
edDriverClass">forceUseNamedDriverClass</a>. Unless you are supplying your =
own unpooled DataSource,=20
	    a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdbcUrl" =
jdbcurl<=3D"" a=3D""> must always be provided and appropriate for the JDBC =
driver, however it is resolved.
	  </a></div><a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdb=
cUrl" jdbcurl<=3D"" a=3D"">
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</a></dd><a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdbcUr=
l" jdbcurl<=3D"" a=3D"">
	</a><dt><a href=3D"http://www.mchange.com/projects/c3p0/index.html#jdbcUrl=
" jdbcurl<=3D"" a=3D""></a><a name=3D"maxAdministrativeTaskTime">maxAdminis=
trativeTaskTime</a></dt><a name=3D"maxAdministrativeTaskTime">
	</a><dd><a name=3D"maxAdministrativeTaskTime">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"maxAdministrativeTaskTime">
	    Seconds before c3p0's thread pool will try to interrupt an apparently =
hung task. <u>Rarely useful.</u> Many of c3p0's functions
	    are not performed by client threads, but asynchronously by an internal=
 thread pool. c3p0's asynchrony enhances
	    client performance directly, and minimizes the length of time that cri=
tical locks are held by ensuring that slow
	    jdbc operations are performed in non-lock-holding threads. If, however=
, some of these tasks "hang", that is
	    they neither succeed nor fail with an Exception for a prolonged period=
 of time, c3p0's thread pool can become
	    exhausted and administrative tasks backed up. If the tasks are simply =
slow, the best way to resolve the problem
	    is to increase the number of threads, via </a><a href=3D"http://www.mc=
hange.com/projects/c3p0/index.html#numHelperThreads">numHelperThreads</a>. =
But if tasks
	    sometimes hang indefinitely, you can use this parameter to force a cal=
l to the task thread's <tt>interrupt()</tt>
	    method if a task exceeds a set time limit. [c3p0 will eventually recov=
er from hung tasks anyway by signalling an "APPARENT
	    DEADLOCK" (you'll see it as a warning in the logs), replacing the thre=
ad pool task threads, and interrupt()ing the
	    original threads. But letting the pool go into APPARENT DEADLOCK and t=
hen recover means that for some periods,
	    c3p0's performance will be impaired. So if you're seeing these message=
s, increasing <a href=3D"http://www.mchange.com/projects/c3p0/index.html#nu=
mHelperThreads">numHelperThreads</a>
	    and setting <tt>maxAdministrativeTaskTime</tt> might help. <tt>maxAdmi=
nistrativeTaskTime</tt> should be large enough
	    that any resonable attempt to acquire a Connection from the database, =
to test a Connection, or to destroy a Connection,=20
	    would be expected to succeed or fail within the time set. Zero (the de=
fault) means tasks are never interrupted,
	    which is the best and safest policy under most circumstances. If tasks=
 are just slow, allocate more threads. If tasks
	    are hanging forever, try to figure out why, and maybe setting <tt>maxA=
dministrativeTaskTime</tt> can help in the meantime.
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"maxConnectionAge">maxConnectionAge</a></dt><a name=3D"maxCo=
nnectionAge">
	<dd>
	  <div class=3D"default">Default: 0</div>
	  <div class=3D"propdesc">
	    Seconds, effectively a time to live. A Connection older than <tt>maxCo=
nnectionAge</tt> will be destroyed and=20
	    purged from the pool. This differs from <tt>maxIdleTime</tt> in that i=
t refers to absolute age. Even a Connection
	    which has not been much idle will be purged from the pool if it exceed=
s <tt>maxConnectionAge</tt>. Zero means
	    no maximum absolute age is enforced.
	  </div>
	</dd>
	</a><dt><a name=3D"maxConnectionAge"></a><a name=3D"maxIdleTime">maxIdleTi=
me</a></dt><a name=3D"maxIdleTime">
	</a><dd><a name=3D"maxIdleTime">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"maxIdleTime">
	    Seconds a Connection can remain pooled but unused before being discard=
ed. Zero means idle connections never expire.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ba=
sic_pool_configuration">"Basic Pool Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"maxIdleTimeExcessConnections">maxIdleTimeExcessConnections<=
/a></dt><a name=3D"maxIdleTimeExcessConnections">
	<dd>
	  <div class=3D"default">Default: 0</div>
	  <div class=3D"propdesc">
		Number of seconds that Connections in excess of <tt>minPoolSize</tt> shou=
ld be permitted to remain idle in the pool
		before being culled. Intended for applications that wish to aggressively =
minimize the number of open Connections,
		shrinking the pool back towards minPoolSize if, following a spike, the lo=
ad level diminishes and Connections
		acquired are no longer needed. If <tt>maxIdleTime</tt> is set, <tt>maxIdl=
eTimeExcessConnections</tt> should be
		smaller if the parameter is to have any effect. Zero means no enforcement=
, excess Connections are not idled out.
	  </div>
	</dd>
	</a><dt><a name=3D"maxIdleTimeExcessConnections"></a><a name=3D"maxPoolSiz=
e">maxPoolSize</a></dt><a name=3D"maxPoolSize">
	</a><dd><a name=3D"maxPoolSize">
	  <div class=3D"default">Default: 15</div>
	  </a><div class=3D"propdesc"><a name=3D"maxPoolSize">
	    Maximum number of Connections a pool will maintain at any given time.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ba=
sic_pool_configuration">"Basic Pool Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"maxStatements">maxStatements</a></dt><a name=3D"maxStatemen=
ts">
	</a><dd><a name=3D"maxStatements">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"maxStatements">
	    The size of c3p0's global PreparedStatement cache. If both <tt>maxStat=
ements</tt> and <tt>maxStatementsPerConnection</tt>
	    are zero, statement caching will not be enabled. If <tt>maxStatements<=
/tt> is zero but <tt>maxStatementsPerConnection</tt>
	    is a non-zero value, statement caching will be enabled, but no global =
limit will be enforced, only the per-connection maximum.
	    <tt>maxStatements</tt> controls the total number of Statements cached,
	    for all Connections. If set, it should be a fairly large number, as ea=
ch pooled Connection requires its own,
	    distinct flock of cached statements. As a guide, consider how many dis=
tinct PreparedStatements are used
	    <i>frequently</i> in your application, and multiply that number by <tt=
>maxPoolSize</tt> to arrive at an appropriate
	    value. Though <tt>maxStatements</tt> is the JDBC standard parameter fo=
r controlling statement caching, users may
	    find c3p0's alternative <tt>maxStatementsPerConnection</tt> more intui=
tive to use.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_statement_pooling">"Configuring Statement Pooling"</a>]
	  </div>
	</dd>
	<dt><a name=3D"maxStatementsPerConnection">maxStatementsPerConnection</a><=
/dt><a name=3D"maxStatementsPerConnection">
	</a><dd><a name=3D"maxStatementsPerConnection">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"maxStatementsPerConnection">
	    The number of PreparedStatements c3p0 will cache for a single pooled C=
onnection.=20
	    If both <tt>maxStatements</tt> and <tt>maxStatementsPerConnection</tt>
	    are zero, statement caching will not be enabled. If <tt>maxStatementsP=
erConnection</tt> is zero but <tt>maxStatements</tt>
	    is a non-zero value, statement caching will be enabled, and a global l=
imit enforced, but otherwise no limit will be set=20
	    on the number of cached statements for a single Connection.
	    If set, maxStatementsPerConnection should be set to about the number d=
istinct PreparedStatements that are used
	    <i>frequently</i> in your application, plus two or three extra so infr=
equently statements don't force the more common
	    cached statements to be culled. Though <tt>maxStatements</tt> is the J=
DBC standard parameter for controlling statement caching,
	    users may find <tt>maxStatementsPerConnection</tt> more intuitive to u=
se.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_statement_pooling">"Configuring Statement Pooling"</a>]
	  </div>
	</dd>
	<dt><a name=3D"minPoolSize">minPoolSize</a></dt><a name=3D"minPoolSize">
	</a><dd><a name=3D"minPoolSize">
	  <div class=3D"default">Default: 3</div>
	  </a><div class=3D"propdesc"><a name=3D"minPoolSize">
	    Minimum number of Connections a pool will maintain at any given time.
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#ba=
sic_pool_configuration">"Basic Pool Configuration"</a>]
	  </div>
	</dd>
	<dt><a name=3D"numHelperThreads">numHelperThreads</a></dt><a name=3D"numHe=
lperThreads">
	<dd>
	  <div class=3D"default">Default: 3</div>
	  <div class=3D"propdesc">
	    c3p0 is very asynchronous. Slow JDBC operations are generally=20
            performed by helper threads that don't hold contended locks. Sp=
reading
            these operations over multiple threads can significantly improv=
e performance
            by allowing multiple operations to be performed simultaneously.=
=09
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	</a><dt><a name=3D"numHelperThreads"></a><a name=3D"overrideDefaultUser">o=
verrideDefaultUser</a></dt><a name=3D"overrideDefaultUser">
	</a><dd><a name=3D"overrideDefaultUser">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"overrideDefaultUser">
	    Forces the username that should by PooledDataSources when a user calls=
 the default
	    getConnection() method. This is primarily useful when applications are=
 pooling Connections
	    from a non-c3p0 unpooled DataSource. Applications that use <tt>ComboPo=
oledDataSource</tt>,=20
	    or that wrap any c3p0-implemented unpooled DataSource can use the simp=
le=20
	    </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#user">u=
ser</a> property.
<!--
	    C3P0 PooledDataSources, implicitly or explicity, are wrappers around u=
npooled DataSources.
	    For most users, the unpooled DataSource is c3p0's own DriverManagerDat=
aSource, but users are
	    welcome to wrap other DataSource implementations. Per the JDBC 2.0 spe=
c, DataSources may offer
	    standard properties "user" and "password". If present, c3p0 PooledData=
Sources use these properties=20
	    to determine what kind of authentication to use. If absent, PooledData=
Sources use the unpooled=20
	    DataSource's default getConnection() method. Some DataSources offer on=
e but not both of the
	    standard properties, which confuses c3p0.
-->=20
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"overrideDefaultPassword">overrideDefaultPassword</a></dt><a=
 name=3D"overrideDefaultPassword">
	</a><dd><a name=3D"overrideDefaultPassword">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"overrideDefaultPassword">
	    Forces the password that should by PooledDataSources when a user calls=
 the default
	    getConnection() method. This is primarily useful when applications are=
 pooling Connections
	    from a non-c3p0 unpooled DataSource. Applications that use <tt>ComboPo=
oledDataSource</tt>,=20
	    or that wrap any c3p0-implemented unpooled DataSource can use the simp=
le
	    </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#passwor=
d">password</a> property.
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"password">password</a></dt><a name=3D"password">
	</a><dd><a name=3D"password">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"password">
	    For applications using <tt>ComboPooledDataSource</tt> or any=20
	    c3p0-implemented unpooled DataSources =E2=80=94 <tt>DriverManagerDataS=
ource</tt> or the
	    DataSource returned by <tt>DataSources.unpooledDataSource( ... )</tt> =
=E2=80=94
	    defines the password that will be used for the DataSource's default=20
	    <tt>getConnection()</tt> method. (See also </a><a href=3D"http://www.m=
change.com/projects/c3p0/index.html#user">user</a>.)
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd>
	<dt><a name=3D"preferredTestQuery">preferredTestQuery</a></dt><a name=3D"p=
referredTestQuery">
	</a><dd><a name=3D"preferredTestQuery">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"preferredTestQuery">
	    Defines the query that will be executed for all connection tests, if t=
he default ConnectionTester (or some
	    other implementation of </a><a href=3D"http://www.mchange.com/projects=
/c3p0/apidocs/com/mchange/v2/c3p0/QueryConnectionTester.html">QueryConnecti=
onTester</a>,
	    or better yet <a href=3D"http://www.mchange.com/projects/c3p0/apidocs/=
com/mchange/v2/c3p0/FullQueryConnectionTester.html">FullQueryConnectionTest=
er</a>)=20
	    is being used. Defining a <tt>preferredTestQuery</tt>
	    that will execute quickly in your database may dramatically speed up C=
onnection tests. (If no <tt>preferredTestQuery</tt>
	    is set, the default ConnectionTester executes a <tt>getTables()</tt> c=
all on the Connection's DatabaseMetaData.
	    Depending on your database, this may execute more slowly than a "norma=
l" database query.)=20
	    <b>NOTE: The table against
        which your <tt>preferredTestQuery</tt> will be run must exist in th=
e database schema <i>prior</i> to your initialization
        of your DataSource. If your application defines its own schema, try=
 <tt>automaticTestTable</tt> instead.</b>
        [See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#con=
figuring_connection_testing">"Configuring Connection Testing"</a>]
	  </div>
	</dd>
	<dt><a name=3D"privilegeSpawnedThreads">privilegeSpawnedThreads</a></dt><a=
 name=3D"privilegeSpawnedThreads">
	</a><dd><a name=3D"privilegeSpawnedThreads">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"privilegeSpawnedThreads">
	    If <tt>true</tt>, c3p0-spawned Threads will have the <tt>java.security=
.AccessControlContext</tt> associated with c3p0 library classes.
	    By default, c3p0-spawned Threads (</a><a href=3D"http://www.mchange.co=
m/projects/c3p0/index.html#numHelperThreads">helper threads</a>, <tt>java.u=
til.Timer</tt> threads) inherit their
	    <tt>AccessControlContext</tt> from the client Thread that provokes ini=
tialization of the pool. This can sometimes be
	    a problem, especially in application servers that support hot redeploy=
ment of client apps. If c3p0's Threads hold a reference
	    to an <tt>AccessControlContext</tt> from the first client that hits th=
em, it may be impossible to garbage collect a <tt>ClassLoader</tt>
	    associated with that client when it is undeployed in a running VM. Als=
o, it is possible client Threads might lack sufficient permission=20
	    to perform operations that c3p0 requires. Setting this to <tt>true</tt=
> can resolve these issues.=20
            [See "<a href=3D"http://www.mchange.com/projects/c3p0/index.htm=
l#configuring_to_avoid_memory_leaks_on_redeploy">Configuring To Avoid Memor=
y Leaks On Hot Redeploy Of Client</a>"]
	    <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	  </div>
	</dd>
	<dt><a name=3D"propertyCycle">propertyCycle</a></dt><a name=3D"propertyCyc=
le">
	</a><dd><a name=3D"propertyCycle">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"propertyCycle">
	    Maximum time in seconds before user configuration constraints are enfo=
rced.
		Determines how frequently <tt>maxConnectionAge</tt>, <tt>maxIdleTime</tt>=
, <tt>maxIdleTimeExcessConnections</tt>,
		<tt>unreturnedConnectionTimeout</tt> are enforced. c3p0 periodically chec=
ks the age of Connections to
		see whether they've timed out. This parameter determines the period. Zero=
 means automatic: A suitable period
		will be determined by c3p0. [You can call <tt>getEffectivePropertyCycle..=
.()</tt> methods on a c3p0
		</a><a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v=
2/c3p0/PooledDataSource.html">PooledDataSource</a> to find the period
		automatically chosen.]
	  </div>
	</dd>
	<dt><a name=3D"statementCacheNumDeferredCloseThreads">statementCacheNumDef=
erredCloseThreads</a></dt><a name=3D"statementCacheNumDeferredCloseThreads"=
>
	</a><dd><a name=3D"statementCacheNumDeferredCloseThreads">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"statementCacheNumDeferredCloseThr=
eads">
            If set to a value greater than 0, the statement cache will trac=
k when Connections are in use, and only destroy
	    Statements when their parent Connections are not otherwise in use. Alt=
hough closing of
	    a Statement while the parent Connection is in use is formally within s=
pec, some databases
	    and/or JDBC drivers, most notably Oracle, do not handle the case well =
and freeze, leading
	    to deadlocks. Setting this parameter to a positive value should elimin=
ate the issue. This parameter
	    should only be set if you observe that attempts by c3p0 to close() cac=
hed statements freeze (usually
	    you'll see <tt>APPARENT DEADLOCKS</tt> in your logs). If set, this par=
ameter should almost always be set to <tt>1</tt>.
	    Basically, if you need more than one Thread dedicated solely to destro=
ying cached Statements, you should set <tt>maxStatements</tt>
	    and/or <tt>maxStatementsPerConnection</tt> so that you don't churn thr=
ough Statements so quickly.
            [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.=
html#configuring_statement_pooling">"Configuring Statement Pooling"</a>]
	    <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	  </div>
	</dd>
	<dt><a name=3D"testConnectionOnCheckin">testConnectionOnCheckin</a></dt><a=
 name=3D"testConnectionOnCheckin">
	</a><dd><a name=3D"testConnectionOnCheckin">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"testConnectionOnCheckin">
            If true, an operation will be performed asynchronously at every=
 connection checkin to verify that the connection is valid.
	    Use in combination with <tt>idleConnectionTestPeriod</tt> for quite re=
liable, always asynchronous Connection testing.
	    Also, setting an <tt>automaticTestTable</tt> or <tt>preferredTestQuery=
</tt> will usually speed up all connection tests.
            [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.=
html#configuring_connection_testing">"Configuring Connection Testing"</a>]
	  </div>
	</dd>
	<dt><a name=3D"testConnectionOnCheckout">testConnectionOnCheckout</a></dt>=
<a name=3D"testConnectionOnCheckout">
	</a><dd><a name=3D"testConnectionOnCheckout">
	  <div class=3D"default">Default: false</div>
	  </a><div class=3D"propdesc"><a name=3D"testConnectionOnCheckout">
            If true, an operation will be performed at every connection che=
ckout to verify that the connection is valid.
            <b><i>Be sure to set an efficient</i></b> <tt>preferredTestQuer=
y</tt> <b><i>or</i></b> <tt>automaticTestTable</tt>=20
	    <b><i>if you set this to</i></b> <tt>true</tt>.=20
	    <b><i>Performing the (expensive) default Connection test on every clie=
nt checkout will harm client performance.</i></b>
	    Testing Connections in checkout is the simplest and most reliable form=
 of Connection testing, but
	    for better performance, consider verifying connections periodically us=
ing <tt>idleConnectionTestPeriod</tt>.=20
            [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.=
html#configuring_connection_testing">"Configuring Connection Testing"</a>]
	  </div>
	</dd>
	<dt><a name=3D"unreturnedConnectionTimeout">unreturnedConnectionTimeout</a=
></dt><a name=3D"unreturnedConnectionTimeout">
	</a><dd><a name=3D"unreturnedConnectionTimeout">
	  <div class=3D"default">Default: 0</div>
	  </a><div class=3D"propdesc"><a name=3D"unreturnedConnectionTimeout">
		Seconds. If set, if an application checks out but then fails to check-in =
[i.e. close()] a Connection
		within the specified period of time, the pool will unceremoniously destro=
y() the Connection. This permits
		applications with occasional Connection leaks to survive, rather than eve=
ntually exhausting the Connection
		pool. And that's a shame. Zero means no timeout, applications are expecte=
d to close() their own Connections.
		Obviously, if a non-zero value is set, it should be to a value longer tha=
n any Connection should reasonably
		be checked-out. Otherwise, the pool will occasionally kill Connections in=
 active use, which is bad.=20
	    <b><i>This is basically a bad idea, but it's a commonly requested feat=
ure. Fix your $%!@% applications
	    so they don't leak Connections! Use this temporarily in combination wi=
th=20
	    <tt>debugUnreturnedConnectionStackTraces</tt> to figure out
	    where Connections are being checked-out that don't make it back into t=
he pool!</i></b>
	    [See </a><a href=3D"http://www.mchange.com/projects/c3p0/index.html#co=
nfiguring_to_debug_and_workaround_broken_clients">"Configuring to Debug and=
 Workaround Broken Client Applications"</a>]
	  </div>
	</dd>
	<dt><a name=3D"user">user</a></dt><a name=3D"user">
	</a><dd><a name=3D"user">
	  <div class=3D"default">Default: null</div>
	  </a><div class=3D"propdesc"><a name=3D"user">
	    For applications using <tt>ComboPooledDataSource</tt> or any=20
	    c3p0-implemented unpooled DataSources =E2=80=94 <tt>DriverManagerDataS=
ource</tt> or the
	    DataSource returned by <tt>DataSources.unpooledDataSource()</tt> =E2=
=80=94
	    defines the username that will be used for the DataSource's default=20
	    <tt>getConnection()</tt> method. (See also </a><a href=3D"http://www.m=
change.com/projects/c3p0/index.html#password">password</a>.)
	  </div>
	  <div class=3D"per-user">Does Not Support Per-User Overrides.</div>
	</dd><dt><a name=3D"usesTraditionalReflectiveProxies"><s>usesTraditionalRe=
flectiveProxies</s></a></dt><a name=3D"usesTraditionalReflectiveProxies">
	<dd>
	  <div class=3D"default">Default: false</div>
	  <div class=3D"propdesc">
	    <span class=3D"deprecated">Deprecated.</span> c3p0 originally used ref=
lective dynamic proxies for=20
	    implementations of Connections and other JDBC
	    interfaces. As of c3p0-0.8.5, non-reflective, code-generated implement=
ations are used instead. As
	    this was a major change, and the old codebase had been extensively use=
d and tested, this parameter
	    was added to allow users to revert of they had problems. The new, non-=
reflexive implementation is
	    faster, and has now been widely deployed and tested, so it is unlikely=
 that this parameter will be useful.
	    Both the old reflective and newer non-reflective codebases are being m=
aintained, but support for the
	    older codebase may (or may not) be dropped in the future.
 	  </div>
	</dd>
      </a></dl><a name=3D"usesTraditionalReflectiveProxies">
      </a><h3><a name=3D"usesTraditionalReflectiveProxies">
	</a><a name=3D"other-properties">Other Properties</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h3>
      <p>
	The following configuration properties affect the behavior of the c3p0 lib=
rary as a whole. They
	may be set as system properties, in a <a href=3D"http://www.mchange.com/pr=
ojects/c3p0/index.html#c3p0_properties"><tt>c3p0.properties</tt></a> file,=
=20
	or in a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_co=
nf">HOCON (typesafe-config) file</a>.
      </p>
      <div class=3D"other_properties_desc">
    <h4><a name=3D"locating_configuration_information">Locating Configurati=
on Information</a></h4>
    <p>
      Normally, c3p0's configuration information is placed in a either a c3=
p0-config.xml or c3p0.properties file
      at the top-level of an application's CLASSPATH. However, if you wish =
to place configuration information
      elsewhere, you may place c3p0 configuration information (in the <a hr=
ef=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-config.xml">XML =
file format</a> only!) anywhere you'd like
      in the filesystem visible to your application. Just set the following=
 property to the full, absolute path
      of the XML config file:=20
    </p>
 	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.c3p0.cfg.xml</li>
	</ul>
    <p>
      If you set this property to a value beginning with "<tt>classloader:<=
/tt>", c3p0 will search for an XML config file as a ClassLoader resource,
      that is, in any location you specify under your classpath, including =
jar-file <tt>META-INF</tt> directories.
    </p>
	<h4>Logging-related properties</h4>
	<p>
	  The following properties affect c3p0's logging behavior. Please see <a h=
ref=3D"http://www.mchange.com/projects/c3p0/index.html#configuring_logging"=
>Configuring Logging</a>
	  above for specific information.
	</p>
	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.log.MLog</li>
	  <li>com.mchange.v2.log.jdk14logging.suppressStackWalk</li>
	  <li>com.mchange.v2.log.NameTransformer</li>
	  <li>com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL</li>
	</ul>
	<h4>Configuring JMX</h4>
	<p>
	  The following properties affect c3p0's JMX management interface. Plese s=
ee=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#jmx_configura=
tion_and_management">Configuring and Managing c3p0 via JMX</a> above
	  for more information.
	</p>
	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.c3p0.management.ExcludeIdentityToken</li>
	  <li>com.mchange.v2.c3p0.management.RegistryName</li>
	  <li>com.mchange.v2.c3p0.management.ManagementCoordinator</li>
	</ul>
	<h4>Configuring the VMID</h4>
        <p>
	  Is it better to be beautiful or correct? Beginning with c3p0-0.9.1, c3p0=
 opts somewhat reluctantly for correctness.
	</p>
	<p>
	  Here's the deal. Every c3p0 DataSource is allocated a unique "identity t=
oken", which is used to ensure that multiple
	  JNDI lookups of the same PooledDataSource always return the same instanc=
e, even if the JNDI name-server stores a
	  Serialized or Referenced instance. Previously, c3p0 was happy for genera=
ted IDs to be unique within a single VM (and it
	  didn't even get that quite right, before c3p0-0.9.1). But in theory, one=
 VM might look up two different DataSources,
	  generated by two different VMs, that by unlikely coincidence have the sa=
me "identity token", leading to errors as one
	  of the two DataSources sneakily substitutes for the second. Though this =
hypothetical issue has never been reported in practice,
	  c3p0 resolves it by prepending a VMID to its identity tokens. This makes=
 them long and ugly, but correct.
	</p>
	<p>
	  If you don't like the long and ugly VMID, you can set your own, or you c=
an turn off this solution to a hypothetical
	  non-problem entirely with the following property:
	</p>
	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.c3p0.VMID</li>
	</ul>
	<p>
	  Set it to <tt>NONE</tt> to turn off the VMID, set it to <tt>AUTO</tt> to=
 let c3p0 generate a VMID,
	  or provide any other String to set the VMID that will be used directly. =
The default is <tt>AUTO</tt>.
	</p>

	<h4><a name=3D"configuring_dctivt">Configuring DefaultConnectionTester.isV=
alidTimeout</a></h4>

	<p>
	  Under circumstances when the JDBC 4+ <tt>isValid(...)</tt> test will be =
used by c3p0's built in
	  DefaultConnectionTester (see <a href=3D"http://www.mchange.com/projects/=
c3p0/index.html#configuring_dctqtr">below</a>), by default the test
	  will never time out. If you would the test to timeout and fail, set the =
following key
	</p>

	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.c3p0.impl.DefaultConnectionTester.isValidTimeout</li>
	</ul>

	<p>
	  to the desired timeout, in seconds.
	</p>

	<h4><a name=3D"configuring_dctqtr">Configuring DefaultConnectionTester.Que=
rylessTestRunner</a></h4>
        <p>
	  c3p0's built-in DefaultConnectionTester does the right and obvious thing=
 when you've provided a <a href=3D"http://www.mchange.com/projects/c3p0/ind=
ex.html#preferredTestQuery">preferredTestQuery</a>
	  or <a href=3D"http://www.mchange.com/projects/c3p0/index.html#automaticT=
estTable">automaticTestTable</a> parameter. But when it has no user-determi=
ned query to run to test a Connection,
	  it's less clear what c3p0 should do. In the JDBC 3 API, there was no str=
aightforward, reliable way to test a JDBC Connection. c3p0's=20
	  DefaultConnectionTester adopted the very conservative technique, using t=
he Connection to query DatabaseMetaData, since this
	  represents a live query to the database that can be executed without any=
 knowledge of a database's schema. Unfortunately, this technique
	  is often very, very slow.
	</p>
	<p>
	  Fortunately, as of version 0.9.5, c3p0 supports the JDBC 4 API's testing=
 using the new <tt>Connection.isValid()</tt> method. This is a fast,
	  reliable test specified and implemented by the JDBC Driver provider.
	</p>
	<p>
	  Although <b>it will very rarely be necessary</b>, users can now specify =
exactly how DefaultConnectionTester will behave if no <a href=3D"http://www=
.mchange.com/projects/c3p0/index.html#preferredTestQuery">preferredTestQuer=
y</a>
	  or <a href=3D"http://www.mchange.com/projects/c3p0/index.html#automaticT=
estTable">automaticTestTable</a> has been set via the following property:
	</p>
	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.c3p0.impl.DefaultConnectionTester.querylessTestRunner=
</li>
	</ul>
        <p>Possible values of this property include</p>
	<dl>
	  <dt><tt>METADATA_TABLESEARCH</tt></dt>
	  <dd>This is c3p0's very slow, but very reliable, traditional default Con=
nection test. It will work even with very old JDBC drivers.</dd>
	  <dt><tt>IS_VALID</tt></dt>
	  <dd>This uses the new JDBC 4 API to perform a driver-defined Connection =
test. An <tt>AbstractMethodError</tt> will be provoked, however, if it is u=
sed with an old JDBC 3 driver.</dd>
	  <dt><tt>SWITCH</tt></dt>
	  <dd>This first attempts the new JDBC 4 Connection test (like <tt>IS_VALI=
D</tt>), but catches any <tt>AbstractMethodError</tt> and falls back onto <=
tt>METADATA_TABLESEARCH</tt> if necessary.</dd>
	  <dt><tt>THREAD_LOCAL</tt></dt>
	  <dd>
	    This checks whether the new <tt>Connection.isValid()</tt> method is av=
ailable for any implementation of <tt>Connection</tt> that it tests, and st=
ores a <tt>ThreadLocal</tt>
	    <tt>WeakHashMap</tt> to track which Connection implementations support=
 the method. It then consults the map and runs the fast <tt>IS_VALID</tt> t=
est or the universal <tt>METADATA_TABLESEARCH</tt>
	    test as appropriate.
	  </dd>
	</dl>
	<p>
	  You can also provide the fully-qualified classname of an implementation =
of the=20
	  <tt><a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/=
v2/c3p0/impl/DefaultConnectionTester.QuerylessTestRunner.html">DefaultConne=
ctionTester.QuerylessTestRunner</a></tt> interface
	  and define your own behavior, whatever you'd like to do. Your class shou=
ld be public, have a public no argument constructor, and be Thread-safe and=
 sharable. (A c3p0
	  pool typically uses just one ConnectionTester to test all of its Connect=
ions, often concurrently.)=20
	  For examples, see the <a href=3D"https://github.com/swaldman/c3p0/blob/m=
aster/src/java/com/mchange/v2/c3p0/impl/DefaultConnectionTester.java">built=
-in implementations</a> in c3p0's source code.
        </p><p>
	  <i>The default value is <tt>SWITCH</tt>, which should be fine almost alw=
ays.</i>
	</p>
        <p>
	  Really, you should almost never bother to set this property. If you are =
using an old JDBC driver
	  and want to eliminate the small overhead of trying the <tt>isValid()</tt=
> method and then catching an <tt>AbstractMethodError</tt>, you can do so b=
y setting its value
	  to <tt>METADATA_TABLESEARCH</tt>. But why bother, when a <i>much, much f=
aster</i> approach is to set a <a href=3D"http://www.mchange.com/projects/c=
3p0/index.html#preferredTestQuery">preferredTestQuery</a>, and avoid the
	  queryless test entirely? If you want to do something totally different, =
you can implement your own <tt>DefaultConnectionTester.QuerylessTestRunner<=
/tt>.
	  Or you can just implement <tt>ConnectionTester</tt> directly, and set th=
e parameter <tt>connectionTesterClassName</tt>.
	</p>
	<h4>Experimental properties</h4>
	<p>
	  c3p0-0.9.1 included a new implementation of asynchronous Connection acqu=
isition that
	  should improve c3p0's performance and resource utilization in cases wher=
e database
	  acquisition attempts, for whatever reason, occasionally fail. The new im=
plementation
	  should be significantly better than the "traditional" Connection acquisi=
tion strategy,
	  but was added too late in the c3p0-0.9.1 development cycle to be fully t=
ested and
	  enabled by default. Users are encouraged to try the new implementation, =
both because
	  it is better, and to help iron out any unanticipated problems.
	</p>
	<p>
	  For a full description of the new implementation and the resource bottle=
neck it is
	  designed to overcome, please see the <tt>CHANGELOG</tt> entry for <tt>c3=
p0-0.9.1-pre11</tt>.
	</p>
	<p>
	  As of c3p0-0.9.2 this feature is enabled by default. To revert to the tr=
aditional Connection
	  acquisition behavior, set the following parameter to <tt>false</tt>.
	</p>
	<ul class=3D"other_props_list">
	  <li>com.mchange.v2.resourcepool.experimental.useScatteredAcquireTask</li=
>
	</ul>
      </div>
    </div>
    <hr>
      <h2>
	<a name=3D"configuration_files">Appendix B: Configuration Files, etc.</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h2>
      <div class=3D"sectiontext">
	<p>
	  c3p0 configuration parameters can be set=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#programmatic_=
configuration">directly in Java code</a>,=20
	  via a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_pr=
operties">simple Java properties file</a>,
	  via a <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_co=
nf">Typesafe "HOCON" file</a>,
	  via an <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0-c=
onfig.xml">XML configuration file</a>, or =20
	  via <a href=3D"http://www.mchange.com/projects/c3p0/index.html#system_pr=
operties">System properties</a>.
	  Any which way
	  works (the the XML configuration is most powerful, though, as it support=
s multiple named configurations and
	  per-user overrides. Choose whatever works best for you.
	</p>
	<h3>
	  <a name=3D"c3p0_properties">Overriding c3p0 defaults via <tt>c3p0.proper=
ties</tt></a>
	  <span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow=
_sm.png" width=3D"20" alt=3D"Go To Top"></a></span>
	</h3>
	<p>
	  To override the library's built-in defaults, create a file called <tt>c3=
p0.properties</tt>
	  and place it at the "root" of your classpath or classloader. For a typic=
al standalone
	  application, that means place the file in a directory named in your <tt>=
CLASSPATH</tt>
	  environment variable. For a typical web-application, the file should be =
placed in=20
	  <tt>WEB-INF/classes</tt>. In general, the file must be available as a cl=
assloader
	  resource under the name <tt>/c3p0.properties</tt>, in the classloader th=
at loaded
	  c3p0's jar file. Review the API docs (especilly <tt>getResource...</tt> =
methods) of=20
	  <tt>java.lang.Class</tt>, <tt>java.lang.ClassLoader</tt>, and <tt>java.u=
til.ResourceBundle</tt>=20
	  if this is unfamiliar.
	</p>
	<p>
	  The format of <tt>c3p0.properties</tt> should be a normal Java Propertie=
s file format,
	  whose keys are c3p0 configurable properties. See <a href=3D"http://www.m=
change.com/projects/c3p0/index.html#configuration_properties">Appendix A</a=
>.
	  for the specifics. An example <tt>c3p0.properties</tt> file is produced =
below:
	</p>
	<div class=3D"example">
# turn on statement pooling
c3p0.maxStatements=3D150
=09
# close pooled Connections that go unused for
# more than half an hour
c3p0.maxIdleTime=3D1800
	</div>
	<h3>
	  <a name=3D"c3p0_conf">Overriding c3p0 defaults with "HOCON" (typesafe-co=
nfig) configuration files</a>
	  <span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow=
_sm.png" width=3D"20" alt=3D"Go To Top"></a></span>
	</h3>
	<p>
	  Typesafe has defined a <a href=3D"https://github.com/typesafehub/config"=
>very nice configuration file format</a> called "<a href=3D"https://github.=
com/typesafehub/config/blob/master/HOCON.md">HOCON</a>".
	</p>
	<p>
	  c3p0 does not include Typesafe's library, but if you bundle it with your=
 application,
	  c3p0 will support configuration in this format. You may place c3p0 confi=
guration in the standard <tt>/application.conf</tt> or <tt>/reference.conf<=
/tt> files,
	  or you may use a special <tt>/c3p0.conf</tt> file.=20
	  (These files must be placed as top-level ClassLoader resources, see <a h=
ref=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_properties">abo=
ve</a>.)
	  <tt>/application.json</tt>, <tt>/application.properties</tt>, and <tt>c3=
p0.json</tt> are also supported,
	  and <a href=3D"https://github.com/typesafehub/config/#uses-of-substituti=
ons">substitutions</a> from <tt>/c3p0.properties</tt> will be resolved.
	  The Typesafe config library can be <a href=3D"http://search.maven.org/#a=
rtifactdetails%7Ccom.typesafe%7Cconfig%7C1.0.0%7Cbundle">downloaded from th=
e Maven Central Repository</a>.
	</p>
	<p><i><b>
	    Remember, HOCON configuration in only supported if you explicitly bund=
le the Typesafe config library
	    with your application. The library is not included with c3p0's binary =
distribution, nor is it downloaded
	    with c3p0 as a transitive dependency!
	</b></i></p>
	<p>
	  Here are some examples of setting c3p0 configuration in HOCON:
	</p>
	<div class=3D"example">
c3p0 {
  # turn on statement pooling
  maxStatements=3D150
=09
  # close pooled Connections that go unused for
  # more than half an hour
  maxIdleTime=3D1800
}
	</div>
	<p>
	  Note that you <i>must</i> specify ordinary config params explicitly insi=
de a c3p0 scope one way or another, even in a <tt>c3p0.conf</tt> file.
	  "Dot notation" can be used equivalently to scopes:
	</p>
	<div class=3D"example">
# equivalent to the example above, and
# identical to the properties file format.

c3p0.maxStatements=3D150
c3p0.maxIdleTime=3D1800
	</div>
	<p>Also, the following two specifications are equivalent:</p>
	<div class=3D"example">
# properties-file-ish specification
com.mchange.v2.log.MLog=3Dcom.mchange.v2.log.log4j.Log4jMLog

# scoped specification of the same
com {
  mchange {
    v2 {
      log {
        MLog=3D"com.mchange.v2.log.log4j.Log4jMLog"
      }
    }
  }
}

	</div>

	<h3>
	  <a name=3D"system_properties">Overriding c3p0 defaults with System prope=
rties</a>
	  <span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow=
_sm.png" width=3D"20" alt=3D"Go To Top"></a></span>
	</h3>
	<p>
	  c3p0 properties can also be defined as System properties, using the same=
 "c3p0." prefix for properties
	  specified in a <tt>c3p0.properties</tt> file.
	</p>
	<div class=3D"example">
swaldman% java -Dc3p0.maxStatements=3D150 -Dc3p0.maxIdleTime=3D1800 example=
.MyC3P0App
	</div>
	<p>
	  System properties override settings in c3p0.properties. Please see=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#configuration=
_precedence">Precedence of Configuration Settings</a> for more information.
	</p>
	<p>
	  Any key that would be legal in a <a href=3D"http://www.mchange.com/proje=
cts/c3p0/index.html#c3p0_properties">c3p0.properties file</a> is legal as
	  a System property, including keys that might have defined=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#named_configu=
rations">named</a>,=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#per-user_conf=
igurations">per-user</a>, or=20
	  <a href=3D"http://www.mchange.com/projects/c3p0/index.html#user_extensio=
ns_to_configurations">user-defined-extension</a>
	  parameters.
	</p>
	<h3>
	  <a name=3D"c3p0-config.xml">Overriding c3p0 defaults via <tt>c3p0-config=
.xml</tt></a>
	  <span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow=
_sm.png" width=3D"20" alt=3D"Go To Top"></a></span>
	</h3>
	<p>
<!--
	  As of c3p0-0.9.1, you can define multiple configurations in an XML confi=
guration file, and specify in your code which
	  configuration to use. For any configurations (including the unnamed defa=
ult configuration), you can define overrides
	  for a particular database user. For example, if several applications acc=
ess your database under different authentication
	  credentials, you might define <tt>maxPoolSize</tt> to be 100 for user <t=
t>highVolumeApp</tt>, but only 10 for user=20
	  <tt>lowLoadApp</tt>. (Recall that Connections associated with different =
authentication credentials
	  are of necessity separated into separate pools, so it makes sense that t=
hese could be configured separately.)
	</p>
-->
	</p><p>
	  You can use the XML config file for all c3p0 configuration, including co=
nfiguration of defaults,
	  named configurations, per-user overrides, and configuration extensions.=
=20
	</p>
	<p>
	  By default, c3p0 will look for an XML configuration file in its classloa=
der's resource path under the name "/c3p0-config.xml".
	  That means the XML file should be placed in a directly or jar file direc=
tly named in your applications CLASSPATH, in WEB-INF/classes,
	  or some similar location.
	</p>
	<p>
	  If you prefer not to bundle your configuration with your code, you can s=
pecify an ordinary filesystem location for c3p0's
	  configuration file via the system property <tt>com.mchange.v2.c3p0.cfg.x=
ml</tt>. (You can also use this property to specify an
	  alternative location in the ClassLoader resource path, e.g. <tt>META-INF=
</tt>. See <a href=3D"http://www.mchange.com/projects/c3p0/index.html#locat=
ing_configuration_information">Locating Configuration Information</a>.)=20
	</p>
	<p>
	  Here is an example <tt>c3p0-config.xml</tt> file:
	</p>
	<div class=3D"example">
&lt;c3p0-config&gt;
  &lt;default-config&gt;
    &lt;property name=3D"automaticTestTable"&gt;con_test&lt;/property&gt;
    &lt;property name=3D"checkoutTimeout"&gt;30000&lt;/property&gt;
    &lt;property name=3D"idleConnectionTestPeriod"&gt;30&lt;/property&gt;
    &lt;property name=3D"initialPoolSize"&gt;10&lt;/property&gt;
    &lt;property name=3D"maxIdleTime"&gt;30&lt;/property&gt;
    &lt;property name=3D"maxPoolSize"&gt;100&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;10&lt;/property&gt;
    &lt;property name=3D"maxStatements"&gt;200&lt;/property&gt;

    &lt;user-overrides user=3D"test-user"&gt;
      &lt;property name=3D"maxPoolSize"&gt;10&lt;/property&gt;
      &lt;property name=3D"minPoolSize"&gt;1&lt;/property&gt;
      &lt;property name=3D"maxStatements"&gt;0&lt;/property&gt;
    &lt;/user-overrides&gt;

  &lt;/default-config&gt;

  &lt;!-- This app is massive! --&gt;
  &lt;named-config name=3D"intergalactoApp"&gt;=20
    &lt;property name=3D"acquireIncrement"&gt;50&lt;/property&gt;
    &lt;property name=3D"initialPoolSize"&gt;100&lt;/property&gt;
    &lt;property name=3D"minPoolSize"&gt;50&lt;/property&gt;
    &lt;property name=3D"maxPoolSize"&gt;1000&lt;/property&gt;

    &lt;!-- intergalactoApp adopts a different approach to configuring stat=
ement caching --&gt;
    &lt;property name=3D"maxStatements"&gt;0&lt;/property&gt;=20
    &lt;property name=3D"maxStatementsPerConnection"&gt;5&lt;/property&gt;

    &lt;!-- he's important, but there's only one of him --&gt;
    &lt;user-overrides user=3D"master-of-the-universe"&gt;=20
      &lt;property name=3D"acquireIncrement"&gt;1&lt;/property&gt;
      &lt;property name=3D"initialPoolSize"&gt;1&lt;/property&gt;
      &lt;property name=3D"minPoolSize"&gt;1&lt;/property&gt;
      &lt;property name=3D"maxPoolSize"&gt;5&lt;/property&gt;
      &lt;property name=3D"maxStatementsPerConnection"&gt;50&lt;/property&g=
t;
    &lt;/user-overrides&gt;
  &lt;/named-config&gt;
&lt;/c3p0-config&gt;
	</div>
<!--=09
	<h3>
	  <a name=3D"programmatic_configuration">Programmatic configuration of Dat=
aSource instances</a>
	  <span class=3D"toplink"><a href=3D"#contents"><img src=3D"arrow_sm.png" =
width=3D"20" alt=3D"Go To Top"/></a></span>
	</h3>
  -->
	<h3>
	  <a name=3D"configuration_precedence">Precedence of Configuration Setting=
s</a>
	  <span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/=
index.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow=
_sm.png" width=3D"20" alt=3D"Go To Top"></a></span>
	</h3>
	<p>
	  c3p0 now permits configuration parameters to be set in a number of diffe=
rent ways and places. Fortunately,
	  there is a clear order of precedence that determines which configuration=
 will "take" in the event of conflicting
	  settings. Conceptually, c3p0 goes down this list from top to bottom, usi=
ng the first setting it finds.=20
	</p>
	<p>
	  Most applications will never use per-user or named configurations. For t=
hese applications, we
	  present a simplified precedence hierarchy:
	</p>
	<div align=3D"center">
	  <ol class=3D"precedence">
	    <li>Configuration values programmatically set.</li>
	    <li>Configuration values set in system properties.</li>
	    <li>Configuration values taken from the default configuration of a <tt=
>c3p0-config.xml</tt> file.</li>
	    <li>Configuration values specified in a <tt>c3p0.properties</tt> file<=
/li>
	    <li>Configuration values in a <tt>c3p0.json</tt> file, <a href=3D"http=
://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"small">if a=
nd only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a <tt>c3p0.conf</tt> file, <a href=3D"http=
://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"small">if a=
nd only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a <tt>application.properties</tt> file, <a=
 href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=
=3D"small">if and only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a <tt>application.json</tt> file, <a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"sma=
ll">if and only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a <tt>application.conf</tt> file, <a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"sma=
ll">if and only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a <tt>reference.conf</tt> file, <a href=3D=
"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"small"=
>if and only if Typesafe config libraries are available.</a></li>
	    <li>c3p0's hard-coded default values.</li>
	  </ol>
	</div>
	<p>
	  For applications that do use named and per-user configurations, here is =
the complete, normative precedence hierarchy:
	</p>
	<div align=3D"center">
	  <ol class=3D"precedence">
	    <li>
	      User-specific overrides programmatically set via:
	      <ul>
		<li><a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v=
2/c3p0/ComboPooledDataSource.html#setUserOverridesAsString"><tt>ComboPooled=
DataSource.setUserOverridesAsString()</tt></a></li>
		<li><a href=3D"http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v=
2/c3p0/WrapperConnectionPoolDataSource.html#setUserOverridesAsString"><tt>W=
rapperConnectionPoolDataSource.setUserOverridesAsString()</tt></a></li>
	      </ul>
	      Note that programmatically setting user-specific overrides <u>replac=
es</u> all user-specific configuration taken from
	      other sources. If you want to merge programmatic changes with precon=
figured overrides, you'll have to use <tt>getUserOverridesAsString()</tt>
	      and modify the original settings before replacing.
	    </li>
	    <li>User-specific overrides taken from a DataSource's named configurat=
ion (specified in <tt>c3p0-config.xml</tt>)</li>
	    <li>User-specific overrides taken from the default configuration (spec=
ified in <tt>c3p0-config.xml</tt>)</li>
	    <li>Non-user-specific values programmatically set.</li>
	    <li>Non-user-specific values taken from a DataSource's named configura=
tion (specified in <tt>c3p0-config.xml</tt>)</li>
	    <li>System property setting of configuration value.</li>
	    <li>Non-user-specific values taken from the default configuration (spe=
cified in <tt>c3p0-config.xml</tt>)</li>
	    <li>Configuration values in a <tt>c3p0.conf</tt> file, <a href=3D"http=
://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"small">if a=
nd only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values specified in a <tt>c3p0.properties</tt> file<=
/li>
	    <li>Configuration values in a  <tt>application.conf</tt> file, <a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"sma=
ll">if and only if Typesafe config libraries are available.</a></li>
	    <li>Configuration values in a  <tt>reference.conf</tt> file, <a href=
=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_conf" class=3D"sma=
ll">if and only if Typesafe config libraries are available.</a></li>
	    <li>c3p0's hard-coded default values.</li>
	  </ol>
	</div>
      </div>
      <h2>
	<a name=3D"hibernate-specific">Appendix C: Hibernate-specific notes</a>
	<span class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/in=
dex.html#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_s=
m.png" width=3D"20" alt=3D"Go To Top"></a></span>
      </h2>
      <div class=3D"sectiontext">
      <p>
	Hibernate's C3P0ConnectionProvider renames 7 c3p0 configuration properties=
, which, if set in your hibernate
	configuration, <b>will override</b> any configuration you may have set in =
a <tt>c3p0.properties</tt> file:=20
      </p>
      <div class=3D"hibernate_props">
	<table class=3D"hibernate_props">
	  <tbody><tr>
	    <th>c3p0-native property name</th><th>hibernate configuration key</th>
	  </tr>
	  <tr>
	    <td>c3p0.acquireIncrement</td><td>hibernate.c3p0.acquire_increment</td=
>
	  </tr>
	  <tr>
	    <td>c3p0.idleConnectionTestPeriod</td><td>hibernate.c3p0.idle_test_per=
iod</td>
	  </tr>
	  <tr>
	    <td>c3p0.initialPoolSize</td><td><span class=3D"hibparam_comment">not =
available -- uses minimum size</span></td>
	  </tr>
	  <tr>
	    <td>c3p0.maxIdleTime</td><td>hibernate.c3p0.timeout</td>
	  </tr>
	  <tr>
	    <td>c3p0.maxPoolSize</td><td>hibernate.c3p0.max_size</td>
	  </tr>
	  <tr>
	    <td>c3p0.maxStatements</td><td>hibernate.c3p0.max_statements</td>
	  </tr>
	  <tr>
	    <td>c3p0.minPoolSize</td><td>hibernate.c3p0.min_size</td>
	  </tr>
	  <tr>
	    <td>c3p0.testConnectionOnCheckout&nbsp;</td><td>hibernate.c3p0.validat=
e <span class=3D"hibparam_comment">hibernate 2.x only!</span></td>
	  </tr>
	</tbody></table>
      </div>
      <p>
	You can set any c3p0 properties in your hibernate config using the prefix =
<tt>hibernate.c3p0</tt>. For example
      </p>
      <div class=3D"example">
hibernate.c3p0.unreturnedConnectionTimeout=3D30
hibernate.c3p0.debugUnreturnedConnectionStackTraces=3Dtrue
      </div>
      <p>
	might be set to help <a href=3D"http://www.mchange.com/projects/c3p0/index=
.html#configuring_to_debug_and_workaround_broken_clients">debug Connection =
leaks</a>.
      </p>
      <p>
	You can always set c3p0 config in a <tt>c3p0.properties</tt> or <tt>c3p0-c=
onfig.xml</tt> file=20
	(see <a href=3D"http://www.mchange.com/projects/c3p0/index.html#c3p0_prope=
rties">"Overriding c3p0 defaults via c3p0.properties"</a>, <a href=3D"http:=
//www.mchange.com/projects/c3p0/index.html#c3p0-config.xml">"Overriding c3p=
0 defaults via c3p0-config.xml"</a>),
	but <i><u>any configuration set in Hibernate config files will override c3=
p0-native configuation!</u></i>
      </p>
    </div>
    <hr>
    <h2><a name=3D"tomcat-specific">Appendix D: Configuring c3p0 DataSource=
s in Tomcat</a><span class=3D"toplink"><a href=3D"http://www.mchange.com/pr=
ojects/c3p0/index.html#contents"><img src=3D"http://www.mchange.com/project=
s/c3p0/arrow_sm.png" width=3D"20" alt=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <div class=3D"boxed">
	<b>Note:</b><br>
	Please see "<a href=3D"http://www.mchange.com/projects/c3p0/index.html#con=
figuring_to_avoid_memory_leaks_on_redeploy">Configuring To Avoid Memory Lea=
ks On Hot Redeploy Of Client</a>"=20
	if you experience memory leaks on Tomcat.<br><br><b>TL; DR:</b> Set <tt><a=
 href=3D"http://www.mchange.com/projects/c3p0/index.html#privilegeSpawnedTh=
reads">privilegeSpawnedThreads</a></tt> to <tt>true</tt> and
	set <tt><a href=3D"http://www.mchange.com/projects/c3p0/index.html#context=
ClassLoaderSource">contextClassLoaderSource</a></tt> to <tt>library</tt>.
      </div>
      <p>
	You can easily configure Apache's Tomcat web application server to use c3p=
0 pooled DataSources.=20
	Below is a Tomcat 5.0  sample config to get you started. It's a fragment o=
f Tomcat's <tt>conf/server.xml</tt> file,
	which should be modified to suit and placed inside a <tt>&lt;Context&gt;</=
tt> element.
      </p>
      <div class=3D"example">
&lt;Resource name=3D"jdbc/pooledDS" auth=3D"Container" type=3D"com.mchange.=
v2.c3p0.ComboPooledDataSource" /&gt;
&lt;ResourceParams name=3D"jdbc/pooledDS"&gt;
  &lt;parameter&gt;
    &lt;name&gt;factory&lt;/name&gt;
    &lt;value&gt;org.apache.naming.factory.BeanFactory&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;driverClass&lt;/name&gt;
    &lt;value&gt;org.postgresql.Driver&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;jdbcUrl&lt;/name&gt;
    &lt;value&gt;jdbc:postgresql://localhost/c3p0-test&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;user&lt;/name&gt;
    &lt;value&gt;swaldman&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;password&lt;/name&gt;
    &lt;value&gt;test&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;minPoolSize&lt;/name&gt;
    &lt;value&gt;5&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;maxPoolSize&lt;/name&gt;
    &lt;value&gt;15&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;acquireIncrement&lt;/name&gt;
    &lt;value&gt;5&lt;/value&gt;
  &lt;/parameter&gt;
&lt;/ResourceParams&gt;
      </div>
      <p>For Tomcat 5.5, try something like the following (thanks to Carl F=
. Hall for the sample!):</p>
      <div class=3D"example">
	&lt;Resource auth=3D"Container"
	          description=3D"DB Connection"
		  driverClass=3D"com.mysql.jdbc.Driver"
		  maxPoolSize=3D"4"
		  minPoolSize=3D"2"
		  acquireIncrement=3D"1"
		  name=3D"jdbc/TestDB"
		  user=3D"test"
		  password=3D"ready2go"
		  factory=3D"org.apache.naming.factory.BeanFactory"
		  type=3D"com.mchange.v2.c3p0.ComboPooledDataSource"
		  jdbcUrl=3D"jdbc:mysql://localhost:3306/test?autoReconnect=3Dtrue" /&gt;
      </div>
      <p>
	The rest is standard J2EE stuff: You'll need to declare your DataSource re=
ference in your <tt>web.xml</tt>
	file:
      </p>
=09
      <div class=3D"example">
&lt;resource-ref&gt;
  &lt;res-ref-name&gt;jdbc/pooledDS&lt;/res-ref-name&gt;
  &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
  &lt;res-auth&gt;Container&lt;/res-auth&gt;
&lt;/resource-ref&gt;
      </div>
      <p>     =20
	And you can access your DataSource from code within your web application l=
ike this:
      </p>
      <div class=3D"example">
InitialContext ic =3D new InitialContext();
DataSource ds =3D (DataSource) ic.lookup("java:comp/env/jdbc/pooledDS");
      </div>
      <p>
	That's it!
      </p>
    </div>
    <hr>
    <h2><a name=3D"jboss-specific">Appendix E: JBoss-specific notes</a><spa=
n class=3D"toplink"><a href=3D"http://www.mchange.com/projects/c3p0/index.h=
tml#contents"><img src=3D"http://www.mchange.com/projects/c3p0/arrow_sm.png=
" width=3D"20" alt=3D"Go To Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	To use c3p0 with JBoss:
	</p><ol>
	  <li>
	    Place c3p0's jar file in the <tt>lib</tt> directory of your=20
	    jboss server instance (e.g. <tt>${JBOSS_HOME}/server/default/lib</tt>)
	  </li>
	  <li>
	    Modify the file below, and save it as <tt>c3p0-service.xml</tt> in the=
=20
	    <tt>deploy</tt> directory of your jboss server (e.g. <tt>${JBOSS_HOME}=
/server/default/deploy</tt>).
	    Note that parameters must be capitalized in this file, but otherwise t=
hey are defined as described
	    above.
	  </li>
	</ol>
    <p>
        </p><div id=3D"showDeprecatedJbossConfigName" style=3D"display: blo=
ck">
        <b>Note:</b> <a href=3D"http://www.mchange.com/projects/c3p0/index.=
html#" onclick=3D"return toggleDisplay('showDeprecatedJbossConfigName', 'De=
precatedJbossConfigName');">
        Users of c3p0 jboss support prior to c3p0-0.9.1 please click here!<=
/a>
        </div>
	<p></p>
	<div class=3D"deprecated" id=3D"DeprecatedJbossConfigName">
	<p>
	   <b>Please note: As of c3p0-0.9.1, the class name of the jboss configura=
tion mbean has changed
	      to <tt>com.mchange.v2.c3p0.jboss.C3P0PooledDataSource</tt> (from <tt=
>com.mchange.v2.c3p0.mbean.C3P0PooledDataSource</tt>),
	      in order to distinguish what is really jboss-specific functionality =
from c3p0's more general JMX
	      support.</b>=20
	</p>
	<p>
	      The old jboss config mbeans are deprecated, but will still work. How=
ever, support for new configuration
	      parameters will only be added under the new name. Updating requires =
a one-word change to your <tt>c3p0-service.xml</tt>,
	      change "mbean" to "jboss" where your old file says 'code=3D"com.mcha=
nge.v2.c3p0.mbean.C3P0PooledDataSource"'. Just do it!=20
	</p>
	<p>
		<a id=3D"hideDataSourcesWithPoolConfig" href=3D"http://www.mchange.com/pr=
ojects/c3p0/index.html#" onclick=3D"return toggleDisplay('showDeprecatedJbo=
ssConfigName', 'DeprecatedJbossConfigName');">Hide box.</a>
	 </p><p>
      </p></div>
=09
	</div>
      <div class=3D"example">
&lt;?xml version=3D"1.0" encoding=3D"UTF-8"?&gt;
&lt;!DOCTYPE server&gt;

&lt;server&gt;

   &lt;mbean code=3D"com.mchange.v2.c3p0.jboss.C3P0PooledDataSource"
          name=3D"jboss:service=3DC3P0PooledDataSource"&gt;
    =20
      &lt;attribute name=3D"JndiName"&gt;java:PooledDS&lt;/attribute&gt;
      &lt;attribute name=3D"JdbcUrl"&gt;jdbc:postgresql://localhost/c3p0-te=
st&lt;/attribute&gt;
      &lt;attribute name=3D"DriverClass"&gt;org.postgresql.Driver&lt;/attri=
bute&gt;
      &lt;attribute name=3D"User"&gt;swaldman&lt;/attribute&gt;
      &lt;attribute name=3D"Password"&gt;test&lt;/attribute&gt;

      &lt;!-- Uncomment and set any of the optional parameters below --&gt;
      &lt;!-- See c3p0's docs for more info.                         --&gt;

      &lt;!-- &lt;attribute name=3D"AcquireIncrement"&gt;3&lt;/attribute&gt=
;                         --&gt;
      &lt;!-- &lt;attribute name=3D"AcquireRetryAttempts"&gt;30&lt;/attribu=
te&gt;                    --&gt;
      &lt;!-- &lt;attribute name=3D"AcquireRetryDelay"&gt;1000&lt;/attribut=
e&gt;                     --&gt;
      &lt;!-- &lt;attribute name=3D"AutoCommitOnClose"&gt;false&lt;/attribu=
te&gt;                    --&gt;
      &lt;!-- &lt;attribute name=3D"AutomaticTestTable"&gt;&lt;/attribute&g=
t;                        --&gt;
      &lt;!-- &lt;attribute name=3D"BreakAfterAcquireFailure"&gt;false&lt;/=
attribute&gt;             --&gt;
      &lt;!-- &lt;attribute name=3D"CheckoutTimeout"&gt;0&lt;/attribute&gt;=
                          --&gt;
      &lt;!-- &lt;attribute name=3D"ConnectionCustomizerClassName"&gt;&lt;/=
attribute&gt;             --&gt;
      &lt;!-- &lt;attribute name=3D"ConnectionTesterClassName"&gt;&lt;/attr=
ibute&gt;                 --&gt;
      &lt;!-- &lt;attribute name=3D"Description"&gt;A pooled c3p0 DataSourc=
e&lt;/attribute&gt;       --&gt;
      &lt;!-- &lt;attribute name=3D"DebugUnreturnedConnectionStackTraces"&g=
t;false&lt;/attribute&gt; --&gt;
      &lt;!-- &lt;attribute name=3D"FactoryClassLocation"&gt;&lt;/attribute=
&gt;                      --&gt;
      &lt;!-- &lt;attribute name=3D"ForceIgnoreUnresolvedTransactions"&gt;f=
alse&lt;/attribute&gt;    --&gt;
      &lt;!-- &lt;attribute name=3D"IdleConnectionTestPeriod"&gt;0&lt;/attr=
ibute&gt;                 --&gt;
      &lt;!-- &lt;attribute name=3D"InitialPoolSize"&gt;3&lt;/attribute&gt;=
                          --&gt;
      &lt;!-- &lt;attribute name=3D"MaxAdministrativeTaskTime"&gt;0&lt;/att=
ribute&gt;                --&gt;
      &lt;!-- &lt;attribute name=3D"MaxConnectionAge"&gt;0&lt;/attribute&gt=
;                         --&gt;
      &lt;!-- &lt;attribute name=3D"MaxIdleTime"&gt;0&lt;/attribute&gt;    =
                          --&gt;
      &lt;!-- &lt;attribute name=3D"MaxIdleTimeExcessConnections"&gt;0&lt;/=
attribute&gt;             --&gt;
      &lt;!-- &lt;attribute name=3D"MaxPoolSize"&gt;15&lt;/attribute&gt;   =
                          --&gt;
      &lt;!-- &lt;attribute name=3D"MaxStatements"&gt;0&lt;/attribute&gt;  =
                          --&gt;
      &lt;!-- &lt;attribute name=3D"MaxStatementsPerConnection"&gt;0&lt;/at=
tribute&gt;               --&gt;
      &lt;!-- &lt;attribute name=3D"MinPoolSize"&gt;0&lt;/attribute&gt;    =
                          --&gt;
      &lt;!-- &lt;attribute name=3D"NumHelperThreads"&gt;3&lt;/attribute&gt=
;                         --&gt;
      &lt;!-- &lt;attribute name=3D"PreferredTestQuery"&gt;&lt;/attribute&g=
t;                        --&gt;
      &lt;!-- &lt;attribute name=3D"TestConnectionOnCheckin"&gt;false&lt;/a=
ttribute&gt;              --&gt;
      &lt;!-- &lt;attribute name=3D"TestConnectionOnCheckout"&gt;false&lt;/=
attribute&gt;             --&gt;
      &lt;!-- &lt;attribute name=3D"UnreturnedConnectionTimeout"&gt;0&lt;/a=
ttribute&gt;              --&gt;
      &lt;!-- &lt;attribute name=3D"UsesTraditionalReflectiveProxies"&gt;fa=
lse&lt;/attribute&gt;     --&gt;


      &lt;depends&gt;jboss:service=3DNaming&lt;/depends&gt;
   &lt;/mbean&gt;

&lt;/server&gt;
      </div>
      <p></p>
    </div>
    <hr>
    <h2><a name=3D"oracle-specific">Appendix F: Oracle-specific API: create=
TemporaryBLOB() and createTemporaryCLOB()</a><span class=3D"toplink"><a hre=
f=3D"http://www.mchange.com/projects/c3p0/index.html#contents"><img src=3D"=
http://www.mchange.com/projects/c3p0/arrow_sm.png" width=3D"20" alt=3D"Go T=
o Top"></a></span></h2>
    <div class=3D"sectiontext">
      <p>
	The Oracle thin JDBC driver provides a non-standard API for creating tempo=
rary BLOBs and CLOBs that
	requires users to call methods on the raw, Oracle-specific Connection impl=
ementation. Advanced users
	might use the <a href=3D"http://www.mchange.com/projects/c3p0/index.html#r=
aw_connection_ops">raw connection operations</a> described above to access =
this
	functionality, but a convenience class is available in a separate jar file=
 (<tt>c3p0-oracle-thin-extras-0.9.5.2.jar</tt>)
	for easier access to this functionality. Please see the=20
	<a href=3D"http://www.mchange.com/projects/c3p0/apidocs-oracle-thin/index.=
html">API docs for <tt>com.mchange.v2.c3p0.dbms.OracleUtils</tt></a>
	for details.
      </p>
    </div>
    <hr>
    <a href=3D"http://www.mchange.com/projects/c3p0/index.html#contents">Ba=
ck to Contents</a>
 =20

</body></html>
------MultipartBoundary--8rswDToWzEvWns4AeNWAgeyH6ODmYmctAgvOIyvpFg----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: chrome-extension://fidicgekecdkdmkjghdgadgdmcfodfid/themes/default/content.css

@charset "utf-8";

#hldict-pop { position: absolute; font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; font-size: 13px; line-height: 1.5em; color: black; z-in=
dex: 2014112700; background: transparent; }

#hldict-pop-texture { height: 0px; border-style: solid none none; border-to=
p-width: 1px; border-top-color: rgb(204, 204, 204); box-shadow: rgba(0, 0, =
0, 0.4) 0px 1px 2px; }

#hldict-pop-close { float: right; margin: 1px 1px 0px 0px; width: 15px; hei=
ght: 15px; cursor: pointer; display: none; background: url("img/header-butt=
ons.png") -5px -3px; }

#hldict-pop-close.hldict-hover { background-position: -5px -19px; }

#hldict-pop-content { padding: 10px; border-radius: 0px 0px 2px 2px; border=
-top-style: none; box-shadow: rgba(0, 0, 0, 0.298039) 0px 2px 3px; backgrou=
nd: white; }

#hldict-poparrow-w { position: relative; height: 7px; }

#hldict-poparrow-w.up { margin: 0px 0px -1px; }

#hldict-poparrow-w.down { margin: -2px 0px 0px; }

#hldict-poparrow { width: 14px; height: 7px; left: 50%; margin-left: -7px; =
position: absolute; z-index: 20130907; }

#hldict-poparrow.up { background: url("img/poparrow.png"); }

#hldict-poparrow.down { background: url("img/poparrow.png") center bottom; =
}

#hldict-pop-title { font-size: 16px; color: rgb(153, 153, 153); }

#hldict-pop-title strong { margin-right: 10px; color: rgb(221, 75, 57); fon=
t-weight: bold; }

#hldict-pop-title #hldict-pop-play { float: right; margin: 1px 0px 0px; cur=
sor: pointer; width: 16px; height: 16px; opacity: 0.55; display: none; back=
ground: url("img/sound.png"); }

#hldict-pop-title #hldict-pop-play:hover { opacity: 1; }

#hldict-pop-detail { padding: 10px 0px; font-size: 14px; text-align: left; =
font-weight: normal; color: rgb(51, 51, 51); line-height: 1.8em; }

#hldict-pop-more { color: rgb(66, 127, 237); text-align: right; cursor: poi=
nter; padding: 0px 2px; }

#hanlin-dict-w { position: fixed; right: 0px; top: 0px; width: 0px; height:=
 100%; z-index: 2014083000; }

#hanlin-dict { border: none; margin: 0px; padding: 0px; }

#hanlin-dict-minwidth { width: 67px; height: 0px; }
------MultipartBoundary--8rswDToWzEvWns4AeNWAgeyH6ODmYmctAgvOIyvpFg----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.mchange.com/projects/c3p0/arrow_sm.png

iVBORw0KGgoAAAANSUhEUgAAABQAAAAZCAQAAACbHsZYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA
BGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VG
AAAA7UlEQVR42mL8z0AcAAggRmIVAgQQw38GNKUCDPWYKv4zAAQQukIBhvNAgfmYCgECCFWhAcN7
IBeE1wO1oCgECCBkhRBlCUAl84H0eZhSiEKAAEIohCmDACSlEIUAAQRTCFIGUugAVVgPdgJYKUQh
QAAxgYUTGPYzXGBIRAsQR6Cy/UAjwAAggCAKPzAsAAp/QFN4gcGQ4QFMFCCAkD3jgGY1iq8BAoiJ
2IgBCCCiFQIEENEKAQKIaIUAAUS0QoAAIlohQAARrRAggIhWCBBARCsECCCiFQIEENEKAQKI6MwF
EEBEKwQIIKIVAgQYAJnOTI21UKEZAAAAAElFTkSuQmCC
------MultipartBoundary--8rswDToWzEvWns4AeNWAgeyH6ODmYmctAgvOIyvpFg------
